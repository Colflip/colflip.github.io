<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-01T13:42:47.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>老板老板,你这里有胡萝卜汁吗？</title>
    <link href="http://yoursite.com/2019/04/01/%E8%80%81%E6%9D%BF%E8%80%81%E6%9D%BF,%E4%BD%A0%E8%BF%99%E9%87%8C%E6%9C%89%E8%83%A1%E8%90%9D%E5%8D%9C%E6%B1%81%E5%90%97/"/>
    <id>http://yoursite.com/2019/04/01/老板老板,你这里有胡萝卜汁吗/</id>
    <published>2019-04-01T13:31:22.000Z</published>
    <updated>2019-04-01T13:42:47.824Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一天,小白兔跑到药店里,问老板:”老板老板,你这里有胡萝卜吗?”<br>&emsp;&emsp;老板说:”没有。”<br>&emsp;&emsp;小白兔就走了。<br>&emsp;&emsp;第二天,小白兔跑到药店里,问老板:”老板老板,你这里有胡萝卜吗?”<br>&emsp;&emsp;老板说:”我都跟你说过了,没有!”<br>&emsp;&emsp;小白兔就走了。<br>&emsp;&emsp;第三天,小白兔跑到药店里,问老板:”老板老板,你这里有胡萝卜吗?”<br>&emsp;&emsp;老板急了:”我跟你说过多少次了?!没有!!!你再烦人,我就拿老虎钳子把你的牙都拔下来!”<br>&emsp;&emsp;小白兔害怕了,跑掉了。<br>&emsp;&emsp;第四天,小白兔跑到药店里,问老板:”老板老板,你这里有老虎钳子吗?”<br>&emsp;&emsp;老板说:”没有。”<br>&emsp;&emsp;小白兔问:”那,你有胡萝卜吗?”<br>&emsp;&emsp;老板真的生气了,拿出老虎钳子来,就把小白兔的牙给通通拔掉了。<br>&emsp;&emsp;第五天,小白兔跑到药店里,问老板:”老板老板,你这里有胡萝卜汁吗?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;一天,小白兔跑到药店里,问老板:”老板老板,你这里有胡萝卜吗?”&lt;br&gt;&amp;emsp;&amp;emsp;老板说:”没有。”&lt;br&gt;&amp;emsp;&amp;emsp;小白兔就走了。&lt;br&gt;&amp;emsp;&amp;emsp;第二天,小白兔跑到药店里,问老板:”老板老板,你这里有胡萝
      
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Next修改永久链接的默认格式</title>
    <link href="http://yoursite.com/2019/04/01/Hexo%20Next%E4%BF%AE%E6%94%B9%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5%E7%9A%84%E9%BB%98%E8%AE%A4%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/04/01/Hexo Next修改永久链接的默认格式/</id>
    <published>2019-04-01T02:52:50.000Z</published>
    <updated>2019-04-01T13:36:25.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># permalink_defaults:</span></span><br><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  rep: hex    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改完成后，文章链接变成 /posts/xxxxx.html的形式，避免中文带来的问题，和有利于搜索引擎的抓取。</p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>&emsp;&emsp;<a href="https://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/permalinks.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插
      
    
    </summary>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Java实习生入职测试题目</title>
    <link href="http://yoursite.com/2019/03/26/Java%E5%AE%9E%E4%B9%A0%E7%94%9F%E5%85%A5%E8%81%8C%E6%B5%8B%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/03/26/Java实习生入职测试题目/</id>
    <published>2019-03-26T13:10:40.000Z</published>
    <updated>2019-04-01T03:04:37.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String类为什么是final的？"><a href="#String类为什么是final的？" class="headerlink" title="String类为什么是final的？"></a>String类为什么是final的？</h1><h1 id="JDKB的HashMap的源码，实现原理，底层结构。"><a href="#JDKB的HashMap的源码，实现原理，底层结构。" class="headerlink" title="JDKB的HashMap的源码，实现原理，底层结构。"></a>JDKB的HashMap的源码，实现原理，底层结构。</h1><h1 id="反射中，Class-forName-和classloader-的区别。"><a href="#反射中，Class-forName-和classloader-的区别。" class="headerlink" title="反射中，Class.forName 和classloader 的区别。"></a>反射中，Class.forName 和classloader 的区别。</h1><h1 id="session和cookie的区别和联系，session的生命周期，多个服务器部署时session管理。"><a href="#session和cookie的区别和联系，session的生命周期，多个服务器部署时session管理。" class="headerlink" title="session和cookie的区别和联系，session的生命周期，多个服务器部署时session管理。"></a>session和cookie的区别和联系，session的生命周期，多个服务器部署时session管理。</h1><h1 id="Java中的队列都有哪些，有什么区别。"><a href="#Java中的队列都有哪些，有什么区别。" class="headerlink" title="Java中的队列都有哪些，有什么区别。"></a>Java中的队列都有哪些，有什么区别。</h1><h1 id="详谈一下Java的内存模型以及GC算法。"><a href="#详谈一下Java的内存模型以及GC算法。" class="headerlink" title="详谈一下Java的内存模型以及GC算法。"></a>详谈一下Java的内存模型以及GC算法。</h1><h1 id="Java10、Java11的新特性。"><a href="#Java10、Java11的新特性。" class="headerlink" title="Java10、Java11的新特性。"></a>Java10、Java11的新特性。</h1><h1 id="Java内存泄漏的问题调查定位：jmap，jstack的使用。"><a href="#Java内存泄漏的问题调查定位：jmap，jstack的使用。" class="headerlink" title="Java内存泄漏的问题调查定位：jmap，jstack的使用。"></a>Java内存泄漏的问题调查定位：jmap，jstack的使用。</h1><h1 id="Spring的体系结构和jar用法。"><a href="#Spring的体系结构和jar用法。" class="headerlink" title="Spring的体系结构和jar用法。"></a>Spring的体系结构和jar用法。</h1><h1 id="Spring-MVC的运行原理。"><a href="#Spring-MVC的运行原理。" class="headerlink" title="Spring MVC的运行原理。"></a>Spring MVC的运行原理。</h1><h1 id="Spring-Boot的执行过程。"><a href="#Spring-Boot的执行过程。" class="headerlink" title="Spring Boot的执行过程。"></a>Spring Boot的执行过程。</h1><h1 id="Spring的事务隔离级别，实现原理。"><a href="#Spring的事务隔离级别，实现原理。" class="headerlink" title="Spring的事务隔离级别，实现原理。"></a>Spring的事务隔离级别，实现原理。</h1><h1 id="Spring-IOC和AOP的底层实现。"><a href="#Spring-IOC和AOP的底层实现。" class="headerlink" title="Spring IOC和AOP的底层实现。"></a>Spring IOC和AOP的底层实现。</h1><h1 id="String-Boot的优点和缺点，以及使用场景等。"><a href="#String-Boot的优点和缺点，以及使用场景等。" class="headerlink" title="String Boot的优点和缺点，以及使用场景等。"></a>String Boot的优点和缺点，以及使用场景等。</h1><h1 id="讲一下SpringCloud-和Dubbo-的优缺点。"><a href="#讲一下SpringCloud-和Dubbo-的优缺点。" class="headerlink" title="讲一下SpringCloud 和Dubbo 的优缺点。"></a>讲一下SpringCloud 和Dubbo 的优缺点。</h1><h1 id="什么是Hystrix？它如何实现容错？"><a href="#什么是Hystrix？它如何实现容错？" class="headerlink" title="什么是Hystrix？它如何实现容错？"></a>什么是Hystrix？它如何实现容错？</h1><h1 id="什么是Netflix-Feign？它的优点是什么？"><a href="#什么是Netflix-Feign？它的优点是什么？" class="headerlink" title="什么是Netflix Feign？它的优点是什么？"></a>什么是Netflix Feign？它的优点是什么？</h1><h1 id="谈一谈分布式一致性到CAP理论、BASE理论。"><a href="#谈一谈分布式一致性到CAP理论、BASE理论。" class="headerlink" title="谈一谈分布式一致性到CAP理论、BASE理论。"></a>谈一谈分布式一致性到CAP理论、BASE理论。</h1><h1 id="常用的线程池模式以及不同线程池的使用场景。"><a href="#常用的线程池模式以及不同线程池的使用场景。" class="headerlink" title="常用的线程池模式以及不同线程池的使用场景。"></a>常用的线程池模式以及不同线程池的使用场景。</h1><h1 id="ReentrantLock-和synchronized-的区别。"><a href="#ReentrantLock-和synchronized-的区别。" class="headerlink" title="ReentrantLock 和synchronized 的区别。"></a>ReentrantLock 和synchronized 的区别。</h1><h1 id="atronicnteger-和volatile-等线程池安全操作的关键字的理解和使用。"><a href="#atronicnteger-和volatile-等线程池安全操作的关键字的理解和使用。" class="headerlink" title="atronicnteger 和volatile 等线程池安全操作的关键字的理解和使用。"></a>atronicnteger 和volatile 等线程池安全操作的关键字的理解和使用。</h1><h1 id="分布式锁的三种实现方式。"><a href="#分布式锁的三种实现方式。" class="headerlink" title="分布式锁的三种实现方式。"></a>分布式锁的三种实现方式。</h1><h1 id="socket框架netty的使用，以及NIO的实现原理，为什么是异步非阻塞。"><a href="#socket框架netty的使用，以及NIO的实现原理，为什么是异步非阻塞。" class="headerlink" title="socket框架netty的使用，以及NIO的实现原理，为什么是异步非阻塞。"></a>socket框架netty的使用，以及NIO的实现原理，为什么是异步非阻塞。</h1><h1 id="简述NIO的最佳实践。"><a href="#简述NIO的最佳实践。" class="headerlink" title="简述NIO的最佳实践。"></a>简述NIO的最佳实践。</h1><h1 id="Zookeeper-的用途，选举的原理是什么？"><a href="#Zookeeper-的用途，选举的原理是什么？" class="headerlink" title="Zookeeper 的用途，选举的原理是什么？"></a>Zookeeper 的用途，选举的原理是什么？</h1><h1 id="手写一个哈夫曼树。"><a href="#手写一个哈夫曼树。" class="headerlink" title="手写一个哈夫曼树。"></a>手写一个哈夫曼树。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;String类为什么是final的？&quot;&gt;&lt;a href=&quot;#String类为什么是final的？&quot; class=&quot;headerlink&quot; title=&quot;String类为什么是final的？&quot;&gt;&lt;/a&gt;String类为什么是final的？&lt;/h1&gt;&lt;h1 id=&quot;J
      
    
    </summary>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CS架构和BS架构区别</title>
    <link href="http://yoursite.com/2019/03/26/CS%E6%9E%B6%E6%9E%84%E5%92%8CBS%E6%9E%B6%E6%9E%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/03/26/CS架构和BS架构区别/</id>
    <published>2019-03-26T04:01:42.000Z</published>
    <updated>2019-04-01T03:04:37.519Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;B/S架构即Client/Server (客户机/服务器) 结构，是一种熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，需要安装客户端才可进行管理操作。B/S架构即浏览器和服务器架构模式。它是随着Internet技术的兴起，对C/S架构的一种变化或者改进的架构。在这种架构下，用户工作界面是通过WWW浏览器来实现，极少部分事务逻辑在前端(Browser)实现，但是主要事务逻辑在服务器端(Server)实现，形成所谓三层3-tier结构。</p><div class="table-container"><table><thead><tr><th style="text-align:center">对象</th><th style="text-align:center">使用环境</th><th style="text-align:center">客户端要求</th><th style="text-align:center">软件安装</th><th style="text-align:center">升级和维护</th><th style="text-align:center">安全性</th></tr></thead><tbody><tr><td style="text-align:center"> C/S</td><td style="text-align:center">用户固定，并且处于相同区域，要求拥有相同的操作系统</td><td style="text-align:center">需要一定配置要求</td><td style="text-align:center">每一个客户端都必须安装和配置软件</td><td style="text-align:center">需要用户自己升级</td><td style="text-align:center">安全性高</td></tr><tr><td style="text-align:center"> B/S</td><td style="text-align:center">要有操作系统和浏览器，与操作系统平台无关</td><td style="text-align:center">对配置基本无要求</td><td style="text-align:center">可以在任何地方进行操作而不用安装任何专门的软件</td><td style="text-align:center">无需用户操作</td><td style="text-align:center">安全性较低</td></tr></tbody></table></div><h1 id="C-S的优缺点"><a href="#C-S的优缺点" class="headerlink" title="C/S的优缺点"></a>C/S的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>&emsp;&emsp;●能充分发挥客户端PC的处理能力，很多工作可以在客户端处理后再提交给服务器，所以CS客户端响应速度快。<br>&emsp;&emsp;●操作界面漂亮、形式多样，可以充分满足客户自身的个性化要求。<br>&emsp;&emsp;●C/S结构的管理信息系统具有较强的事务处理能力，能实现复杂的业务流程。<br>&emsp;&emsp;●安全性能可以很容易保证，C/S一般面向相对固定的用户群，程序更加注重流程，它可以对权限进行多层次校验，提供了更安全的存取模式，对信息安全的控制能力很强。一般高度机密的信息系统采用C/S结构适宜。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>&emsp;&emsp;●需要专门的客户端安装程序，分布功能弱，针对点多面广且不具备网络条件的用户群体，不能够实现快速部署安装和配置。<br>&emsp;&emsp;●兼容性差，对于不同的开发工具，具有较大的局限性。若采用不同工具，需要重新改写程序。<br>&emsp;&emsp;●开发、维护成本较高，需要具有一定专业水准的技术人员才能完成，发生一次升级，则所有客户端的程序都需要改变。。<br>&emsp;&emsp;●用户群固定。由于程序需要安装才可使用，因此不适合面向一些不可知的用户，所以适用面窄，通常用于局域网中。</p><h1 id="B-S的优缺点"><a href="#B-S的优缺点" class="headerlink" title="B/S的优缺点"></a>B/S的优缺点</h1><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><p>&emsp;&emsp;●分布性强，客户端零维护。只要有网络、浏览器，可以随时随地进行查询、浏览等业务处理。<br>&emsp;&emsp;●业务扩展简单方便，通过增加网页即可增加服务器功能。<br>&emsp;&emsp;●维护简单方便，只需要改变网页，即可实现所有用户的同步更新。<br>&emsp;&emsp;●开发简单，共享性强。</p><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><p>&emsp;&emsp;●个性化特点明显降低，无法实现具有个性化的功能要求。<br>&emsp;&emsp;●在跨浏览器上，BS架构不尽如人意。<br>&emsp;&emsp;●客户端服务器端的交互是请求-响应模式，通常动态刷新页面，响应速度明显降低（Ajax可以一定程度上解决这个问题）。无法实现分页显示，给数据库访问造成较大的压力。<br>&emsp;&emsp;●在速度和安全性上需要花费巨大的设计成本。<br>&emsp;&emsp;●功能弱化，难以实现传统模式下的特殊功能要求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;B/S架构即Client/Server (客户机/服务器) 结构，是一种熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，需要安装客户端才可进行管理操作。B/S架构即浏览器和服务器架构模式。它是随着In
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="B/S" scheme="http://yoursite.com/tags/B-S/"/>
    
      <category term="C/S" scheme="http://yoursite.com/tags/C-S/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>可行性研究</title>
    <link href="http://yoursite.com/2019/03/25/%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/03/25/可行性研究/</id>
    <published>2019-03-25T03:25:31.000Z</published>
    <updated>2019-04-01T03:04:37.629Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;可行性研究的目的是，用最小的代价在尽可能短的时间里确定问题是否能够解决。</p><h1 id="可行性研究的任务"><a href="#可行性研究的任务" class="headerlink" title="可行性研究的任务"></a>可行性研究的任务</h1><p>&emsp;&emsp;可行性研究的目的不是解决任务，而是确定任务是否值得去解决。重点在于怎样通过科学有效的方法和措施，用最小的代价去确定系统完成后所带来的的收益是否达到值得投资开发这个系统的程度。<br>&emsp;&emsp;首先要进一步分析和澄清问题定义。<br>&emsp;&emsp;在澄清问题定义后，导出系统的逻辑模型。然后从系统逻辑模型出发，探索若干种可供选择的主要解法（即系统实现方案）。对没种解法都应仔细研究它的可行性，一般来说，至少应该从下述3个方面研究每种解法的可行性。<br>&emsp;&emsp;①技术可信性。使用现有的技术能实现这个系统吗？<br>&emsp;&emsp;②经济可行性。这个系统的经济效益能超过他的开发成本吗？<br>&emsp;&emsp;③操作可行性。系统的操作方式在这个用户组织内行得通吗？<br>&emsp;&emsp;必要时还应该从法律、社会效益等更广泛的方面研究每种解法的可行性。<br>&emsp;&emsp;应该制定一个粗略的实现进度。并对以后的行动方针提出建议。如果问题没有可行的解，应该立即停止这项开发工程。如果问题值得解，应该选择一个较好的解决方案，并且为工程制定一个初步计划。<br>&emsp;&emsp;可行性研究的时间长短取决于工程的规模。一般是总工程预期时间的5%~10%。</p><h1 id="可行性研究的过程"><a href="#可行性研究的过程" class="headerlink" title="可行性研究的过程"></a>可行性研究的过程</h1><h2 id="复查系统规模和目标"><a href="#复查系统规模和目标" class="headerlink" title="复查系统规模和目标"></a>复查系统规模和目标</h2><h2 id="研究目前正在使用的系统"><a href="#研究目前正在使用的系统" class="headerlink" title="研究目前正在使用的系统"></a>研究目前正在使用的系统</h2><h2 id="导出新系统的高层逻辑模型"><a href="#导出新系统的高层逻辑模型" class="headerlink" title="导出新系统的高层逻辑模型"></a>导出新系统的高层逻辑模型</h2><h2 id="进一步定义问题"><a href="#进一步定义问题" class="headerlink" title="进一步定义问题"></a>进一步定义问题</h2><h2 id="导出和评价供选择的解法"><a href="#导出和评价供选择的解法" class="headerlink" title="导出和评价供选择的解法"></a>导出和评价供选择的解法</h2><h2 id="推荐行动方针"><a href="#推荐行动方针" class="headerlink" title="推荐行动方针"></a>推荐行动方针</h2><h2 id="草拟开发计划"><a href="#草拟开发计划" class="headerlink" title="草拟开发计划"></a>草拟开发计划</h2><h2 id="书写文档提交审查"><a href="#书写文档提交审查" class="headerlink" title="书写文档提交审查"></a>书写文档提交审查</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;可行性研究的目的是，用最小的代价在尽可能短的时间里确定问题是否能够解决。&lt;/p&gt;
&lt;h1 id=&quot;可行性研究的任务&quot;&gt;&lt;a href=&quot;#可行性研究的任务&quot; class=&quot;headerlink&quot; title=&quot;可行性研究的任务&quot;&gt;&lt;/a&gt;可行性研究的
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多路复用技术</title>
    <link href="http://yoursite.com/2019/03/20/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/03/20/多路复用技术/</id>
    <published>2019-03-20T15:12:57.000Z</published>
    <updated>2019-04-01T03:35:02.844Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;也称信道复用技术。复用(multiplexing)是通信技术中的基本概念。<br>&emsp;&emsp;在计算机网络或数据通信系统中，传输介质的传输能力往往会超过传输单一信号的要求。为了提高通信线路的利用率，实现在一条通信线路上同时发送多个信号，使得一条通信线路可以由多个数据终端设备同时使用而互不影响，这就是多路复用技术。  常见的多路复用技术主要由两大类：一种是将带宽较大的信道分割成为多个子信道，即频分多路复用技术；另一种是将多个带宽较窄的信道组合成一个频率较大的信道，即时分多路复用技术。<br><img src="/001.png" width="95%" height="100%" alt=" "></p><h1 id="基本复用"><a href="#基本复用" class="headerlink" title="基本复用"></a>基本复用</h1><h2 id="频分复用-FDM-Frequency-Division-Multiplexing"><a href="#频分复用-FDM-Frequency-Division-Multiplexing" class="headerlink" title="频分复用 FDM(Frequency Division Multiplexing)"></a>频分复用 FDM(Frequency Division Multiplexing)</h2><h2 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h2><h2 id="统计时分复用"><a href="#统计时分复用" class="headerlink" title="统计时分复用"></a>统计时分复用</h2><h1 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h1><h1 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h1><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;也称信道复用技术。复用(multiplexing)是通信技术中的基本概念。&lt;br&gt;&amp;emsp;&amp;emsp;在计算机网络或数据通信系统中，传输介质的传输能力往往会超过传输单一信号的要求。为了提高通信线路的利用率，实现在一条通信线路上同时发送多个信号，使
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java Web以输入输出流实现读取数据库图片</title>
    <link href="http://yoursite.com/2019/03/19/Java%20Web%E4%BB%A5%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%AE%9E%E7%8E%B0%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/03/19/Java Web以输入输出流实现读取数据库图片/</id>
    <published>2019-03-19T03:32:05.000Z</published>
    <updated>2019-04-01T03:04:37.544Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在web开发中，读取显示图片非常常见，实现方式也有很多，下面介绍一种以流的形式实现读取数据库图片。java环境：eclipse，数据库：MySQL。<br>&emsp;&emsp;其他过程忽略，只写Servlet和jsp代码。</p><h1 id="Servlet写法"><a href="#Servlet写法" class="headerlink" title="Servlet写法"></a>Servlet写法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> public String imgAddr;</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">       request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">     response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">     response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">     HttpSession session = request.getSession();</span><br><span class="line">     String op = request.getParameter(<span class="string">"op"</span>);</span><br><span class="line"></span><br><span class="line">     switch (op) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">"showimg"</span>:</span><br><span class="line">           imgRead(request, response,imgAddr);</span><br><span class="line">           <span class="built_in">break</span>;</span><br><span class="line">default:</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">private void imgRead(HttpServletRequest request, HttpServletResponse response, String imgAddr) throws ServletException, IOException &#123;</span><br><span class="line">// 本地文件路径</span><br><span class="line">String filePath = <span class="string">"E:"</span> + File.separator + <span class="string">"Users"</span> + File.separator + <span class="string">"Yohua "</span> + File.separator + <span class="string">"weixinapp "</span></span><br><span class="line">+ File.separator + <span class="string">"Medical_master"</span> + File.separator + imgAddr;</span><br><span class="line">File file = new File(filePath);</span><br><span class="line">// 获取输出流</span><br><span class="line">OutputStream outputStream = response.getOutputStream();</span><br><span class="line">FileInputStream fileInputStream = new FileInputStream(file);</span><br><span class="line">// 读数据</span><br><span class="line">byte[] data = new byte[fileInputStream.available()];</span><br><span class="line">fileInputStream.read(data);</span><br><span class="line">fileInputStream.close();</span><br><span class="line">// 回写</span><br><span class="line">response.setContentType(JPG);</span><br><span class="line">outputStream.write(data);</span><br><span class="line">outputStream.flush();</span><br><span class="line">outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSP代码"><a href="#JSP代码" class="headerlink" title="JSP代码"></a>JSP代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img alt=<span class="string">"showImage"</span> src=<span class="string">"AdminServlet?op=showimg"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在web开发中，读取显示图片非常常见，实现方式也有很多，下面介绍一种以流的形式实现读取数据库图片。java环境：eclipse，数据库：MySQL。&lt;br&gt;&amp;emsp;&amp;emsp;其他过程忽略，只写Servlet和jsp代码。&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
      <category term="输入输出流" scheme="http://yoursite.com/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>很重要的能力——身体控制精神</title>
    <link href="http://yoursite.com/2019/03/18/%E5%BE%88%E9%87%8D%E8%A6%81%E7%9A%84%E8%83%BD%E5%8A%9B%E2%80%94%E2%80%94%E8%BA%AB%E4%BD%93%E6%8E%A7%E5%88%B6%E7%B2%BE%E7%A5%9E/"/>
    <id>http://yoursite.com/2019/03/18/很重要的能力——身体控制精神/</id>
    <published>2019-03-18T04:03:52.000Z</published>
    <updated>2019-04-01T03:04:37.703Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;大多数人做事的逻辑，无非是：我先弄好一个目标，然后想清楚我有什么资源，然后该按照什么计划来搞，再加上一点自我监督，按结果给自己一点奖励和惩罚。<br>&emsp;&emsp;比如读书，我们今年的目标是50本，那么我们可以列出一个书单，和一个计划表，把一个月、一周、一天的哪些时间分配给读书，接着，一本本攻克！<br>&emsp;&emsp;比如减肥，我们可以定下一个减肥的最小目标，10公斤，然后办一张健身卡，每天控制饮食，然后记录自己的体重变化，设定每周的最小运动次数等等……最后的结果是啥呢？很简单——大多数人都没能坚持下来。<br>&emsp;&emsp;为什么呢？也很简单，因为这些办法，本质上都是“用精神操控肉体”，注定是要失败的。<br>&emsp;&emsp;你必须要学会，用肉体操控精神。<br>&emsp;&emsp;比如读书，不管你多不愿意，有什么借口，你都可以选择让你的身体先坐下来，拿出书，翻开，然后开始读，读了一两分钟你会惊奇地发现，你竟然自己慢慢就读下去了。<br>&emsp;&emsp;比如锻炼，刮风下雨、公司加班、肚子不舒服……一大堆奇怪的理由会“阻挡”你锻炼，怎么办呢？很简单，强制自己的身体去锻炼的地方，以一种无意识的状态站在器材上，然后开始练，然后，你也会惊奇地发现——卧槽，其实锻炼起来很easy的嘛！<br>&emsp;&emsp;究竟是咋回事儿呢？<br>&emsp;&emsp;很简单，其实是一个生物学与心理学原理，就是人的身体和精神之间，往往存在很深入的“互相牵引”，而我们自己却很难意识到。（或者叫“知觉现象学”）在我们潜在的观念里，我们总是认为“自己”是独立的、精神和肉体是二元的、肉体是惰性的需要精神来拉动的……最后的结果当然是——根本带不动啊！其实——精神是有着很强的“自我适应能力”的。<br>&emsp;&emsp;你把你的身体，放到一个场景中，你的精神怎么办呢？嘿嘿，它会自然而然地接受这个场景，并且顺势地“继续下去”，甚至还会将做这件事的“痛苦”化为“快乐”。所以啊，为什么要学会“用肉体控制/推动精神”，而不是相相反？还因为你的精神会在你还没行动前，就给你设置了一大堆障碍、想象出一百万种失败场景把你吓尿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;大多数人做事的逻辑，无非是：我先弄好一个目标，然后想清楚我有什么资源，然后该按照什么计划来搞，再加上一点自我监督，按结果给自己一点奖励和惩罚。&lt;br&gt;&amp;emsp;&amp;emsp;比如读书，我们今年的目标是50本，那么我们可以列出一个书单，和一个计划表，把
      
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="控制自我" scheme="http://yoursite.com/tags/%E6%8E%A7%E5%88%B6%E8%87%AA%E6%88%91/"/>
    
      <category term="自我提升" scheme="http://yoursite.com/tags/%E8%87%AA%E6%88%91%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>阶级固化现象越来越严重，向上的路越来越难</title>
    <link href="http://yoursite.com/2019/03/14/%E9%98%B6%E7%BA%A7%E5%9B%BA%E5%8C%96%E7%8E%B0%E8%B1%A1%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B8%A5%E9%87%8D%EF%BC%8C%E5%90%91%E4%B8%8A%E7%9A%84%E8%B7%AF%E8%B6%8A%E6%9D%A5%E8%B6%8A%E9%9A%BE/"/>
    <id>http://yoursite.com/2019/03/14/阶级固化现象越来越严重，向上的路越来越难/</id>
    <published>2019-03-14T11:24:18.000Z</published>
    <updated>2019-04-01T03:04:37.794Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一个理想的社会，一定是流动的。人才、资源和其他因素可以自由流动，信息能够充分传播，不受任何因素限制，也不会存在信息的不对等。但现实中，这种理想状态是不存在的，虽然互联网的形成在一定程度上增强了信息的传播，但当信息量过大过多时，互联网便成了负面因素，因为从无穷无尽的信息中找出有用的信息，对于个人来说近乎于不可能，而有些人可以借助超级计算机等资源找出有用信息，本质上还是没有有效传播信息，或者说也没有形成人人平等的接受信息。<br>&emsp;&emsp;而在这种情况下，那些既得利益者或者说有资源的人，便形成了对社会资源的垄断。无可争议，阶级固化正在加重，掌握社会资源多的人，他们的后代更容易获得、调动社会资源，更容易成功。这个道理自古皆然，但现在，越来越严重。这种固化现象，在其他领域已经很明显。但现在，教育领域也被逐渐侵蚀。过去，富人因自身素养、学校能力的问题，很多富二代并未得到很好的教育，甚至反而被惯坏了，导致富不过三代甚至富不过二代，造成了中国社会阶层的流动通畅（当然也有中国社会巨变等其他原因）。在未来，教育资源将向富人集中，富人的后代将得到更好的教育，富二代将逐渐从一个贬义词，进化成中性词、褒义词。当教育也完成固化，教授的儿子还是教授，富人的孩子也拥有很高的知识水平时，那穷人的孩子将彻底没有机会翻身。</p><p><center><img src="001.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;一场又一场的技术革命，让人逐渐脱离被饿死的命运，人们不用为生计担忧，而当人们衣食无忧时，也是阶级流动停止的时候，而且“奶头乐”行动已经开始。精英永远是精英，而普通人永远是普通人。</p><p><center><img src="002.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;向上的路很难很远，希望自己能通过奋斗，上一个台阶，否则以后会越来越难。</p><p><center><img src="003.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;<a href="https://www.zhihu.com/question/315746465" target="_blank" rel="noopener">如何评价美国最大规模大学招生舞弊： 50 人被捕，耶鲁斯坦福都卷入？</a><br>&emsp;&emsp;<a href="https://www.foxnews.com/category/topic/college-admissions-scandal" target="_blank" rel="noopener">College Admissions Scandal</a><br>&emsp;&emsp;<a href="https://www.jianshu.com/p/5c8e27a02734" target="_blank" rel="noopener">不要让阶级固化了教育</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/27328725" target="_blank" rel="noopener">美国的危机：阶层固化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;一个理想的社会，一定是流动的。人才、资源和其他因素可以自由流动，信息能够充分传播，不受任何因素限制，也不会存在信息的不对等。但现实中，这种理想状态是不存在的，虽然互联网的形成在一定程度上增强了信息的传播，但当信息量过大过多时，互联网便成了负面因素，因
      
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>要看的纪录片</title>
    <link href="http://yoursite.com/2019/03/09/%E8%A6%81%E7%9C%8B%E7%9A%84%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    <id>http://yoursite.com/2019/03/09/要看的纪录片/</id>
    <published>2019-03-09T13:45:47.000Z</published>
    <updated>2019-04-01T03:04:37.786Z</updated>
    
    <content type="html"><![CDATA[<p>记录片</p><ol><li>我在故宫修文物av3924328</li><li>国脉·中国国家博物馆av4152415</li><li>御膳房av4004813</li><li>帝陵 av4619981</li><li>中国通史av5670296</li><li>北京中轴线av4378167</li><li>大明宫av1730716</li><li>大运河av4139898</li><li>超级工程av6456542<br>10.航拍中国av8320409<br>11.舌尖上的中国第一季av3585546，<br>第二季av4231881<br>12.长城av3122019<br>13.楚国八百年<strong><strong>2037<br>14.台北故宫av3578648<br>15.汉字五千年av250263<br>16.河西走廊av2229874<br>17.新丝绸之路av1242179<br>18.史说汉字av2483589<br>19.海昏侯大墓av3563428<br>20.复活的军团av522440<br>21.圆明园av1563053<br>22.东方帝王谷av2484328<br>23.望长安av4686831<br>24.布衣中国av8802176<br>25.大汉帝国av5332988<br>26.中华文明av3479721<br>27.历史的拐点av5957522<br>28.世界遗产在中国av4734362<br>29.再说长江av2120529<br>30.美丽中国av2251606<br>31.敦煌av5031538<br>32.敦煌画派</strong></strong>40353<br>33.与全世界做生意av2837502<br>34.留住手艺av3193310<br>35.第三极av8668069<br>36.当卢浮宫遇见紫禁城av1458232<br>37.天河av2933029<br>38.光阴·西藏的西藏av4471131<br>39.中国高铁av9701763<br>40.筑梦路上av5053430<br>41.故宫100av4114589<br>42.我们诞生在中国av7346616<br>43.锦绣纪av6294513<br>44.古兵器大揭秘av5838576<br>45.大国重器av1806333<br>46.寻味顺德av4673559<br>47.味道云南av3692768<br>48.客从合出来av1088790<br>49.南宋av3613036<br>50.神秘的西夏av4670883</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录片&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我在故宫修文物av3924328&lt;/li&gt;
&lt;li&gt;国脉·中国国家博物馆av4152415&lt;/li&gt;
&lt;li&gt;御膳房av4004813&lt;/li&gt;
&lt;li&gt;帝陵 av4619981&lt;/li&gt;
&lt;li&gt;中国通史av5670296&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="人文知识" scheme="http://yoursite.com/categories/%E4%BA%BA%E6%96%87%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="纪录片" scheme="http://yoursite.com/tags/%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Atom Markdown常用技巧</title>
    <link href="http://yoursite.com/2019/03/08/Atom%20Markdown%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/03/08/Atom Markdown常用技巧/</id>
    <published>2019-03-08T09:33:42.000Z</published>
    <updated>2019-04-01T03:04:37.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>&emsp;&emsp;只需要输入如下内容, Atom编辑器会自动提示，回车之后即可进入对应的状态。</p><ol><li>加粗文字 : b</li><li>代码: c</li><li>斜体: i</li><li>图像: img</li><li>链接: l</li><li>权声明: legal</li><li>填充文字: lorem</li><li>引用编号代码格式:ref</li><li>外联引用指定编号的链接: rl</li><li>外联引用指定编号图片: rimg</li><li>todo列表 :t</li><li>表格： table</li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;只需要输入如下内容, Atom编辑器会自动提示，回车之后即可进入对应的状态。&lt;/p&gt;
&lt;ol
      
    
    </summary>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Atom" scheme="http://yoursite.com/tags/Atom/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
      <category term="快捷键" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>互联网络的结构</title>
    <link href="http://yoursite.com/2019/03/07/%E4%BA%92%E8%BF%9E%E7%BD%91%E7%BB%9C%E7%9A%84%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2019/03/07/互连网络的结构/</id>
    <published>2019-03-07T08:23:43.000Z</published>
    <updated>2019-04-01T03:04:37.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态互连网络"><a href="#静态互连网络" class="headerlink" title="静态互连网络"></a>静态互连网络</h1><p>&emsp;&emsp;互连网络可以分为两类：静态互连网络（static interconnection network）和动态互连网络（dynamic interconnection network）。静态互连网络是指各节点之间有固定的连接通路，且在运行中不能改变的网络。而动态互连网络则是由交换开关构成、可按运行程序的要求动态的改变连接状态的网络。静态互连网路比较适合用于构造通信模式预测或用静态连接实现的计算机。</p><h2 id="线性阵列"><a href="#线性阵列" class="headerlink" title="线性阵列"></a>线性阵列</h2><h2 id="环和带环"><a href="#环和带环" class="headerlink" title="环和带环"></a>环和带环</h2><h2 id="循环移数网络"><a href="#循环移数网络" class="headerlink" title="循环移数网络"></a>循环移数网络</h2><h2 id="树形和星形"><a href="#树形和星形" class="headerlink" title="树形和星形"></a>树形和星形</h2><h2 id="胖树形"><a href="#胖树形" class="headerlink" title="胖树形"></a>胖树形</h2><h2 id="网格形和环网形"><a href="#网格形和环网形" class="headerlink" title="网格形和环网形"></a>网格形和环网形</h2><h2 id="超立方体"><a href="#超立方体" class="headerlink" title="超立方体"></a>超立方体</h2><h1 id="动态互连网络"><a href="#动态互连网络" class="headerlink" title="动态互连网络"></a>动态互连网络</h1><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><h2 id="多级互连网络"><a href="#多级互连网络" class="headerlink" title="多级互连网络"></a>多级互连网络</h2><p>&emsp;&emsp;（1）Omega网络<br>&emsp;&emsp;下图是一个8<em>8的Omega网络，共有3级，每级由4个2</em> 2开关构成。级间互连采用均匀洗牌模式。网络的左侧是8个输入，右侧是8个输出。</p><p><center><img src="001.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;一般来说，一个N输入的Omega网络有<script type="math/tex">log_2N</script>级，每级用<script type="math/tex">\frac{N}{2}</script> 个2<em> 2开关模块，共需要 <script type="math/tex">Nlog_2\frac{N}{2}</script>个开关。每个开关模块均采用单元控制方式。<br>&emsp;&emsp;（2）多级立方体网络<br>&emsp;&emsp;多级立方体网络采用二功能（直送和交换）的2</em> 2开关和交换函数构成，其级间互连按照从左到右的次序分别是<script type="math/tex">C_0、C_1、C_2</script> 互连函数。可以通过设置开关的工作状态来得到不同的多级互连网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态互连网络&quot;&gt;&lt;a href=&quot;#静态互连网络&quot; class=&quot;headerlink&quot; title=&quot;静态互连网络&quot;&gt;&lt;/a&gt;静态互连网络&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;互连网络可以分为两类：静态互连网络（static interconnection n
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机系统结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>互联网络的基本概念</title>
    <link href="http://yoursite.com/2019/03/07/%E4%BA%92%E8%BF%9E%E7%BD%91%E7%BB%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/03/07/互连网络的基本概念/</id>
    <published>2019-03-07T06:53:12.000Z</published>
    <updated>2019-04-01T03:04:37.603Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;此处概念限定为“互连”，与“互联”区分。</p><h1 id="互连网络的功能和特征"><a href="#互连网络的功能和特征" class="headerlink" title="互连网络的功能和特征"></a>互连网络的功能和特征</h1><p>&emsp;&emsp;互联网络（interconnection network）是一种由开关元件按照一定拓扑结构和控制方式构成的网络，用来实现计算机系统中结点之间的相互连接。这些节点可以是处理器、存储模块后其他设备。从拓扑结构角度，互联网络是从输入结点到输出结点之间的一组互连或映射（mapping）。</p><p><center><img src="001.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;互连网络已经成为并行计算机系统的一个关键组成部分。随着各个领域对高性能计算机的要求越来越高，多处理机和多计算机系统的规模越来越大，对处理器之间或处理单元与存储模块之间通信的速度和灵活性的要求也越来越高。因此，它对计算机系统的性能价格比有着决定性的影响。<br>&emsp;&emsp;可以从以下4个不同的方面来描述互连网络。<br>&emsp;&emsp;（1）定时方式：有同步和异步两种。<br>&emsp;&emsp;同步系统使用一个统一的时钟。它可以将数据同时播送到所有处理器结点中， 也可以使所有结点同时与相邻的结点进行通信（若无冲突）。而异步系统没有统一的时钟，系统中的各个处理机都是独立地工作。<br>&emsp;&emsp;（2）交换方式：有线路交换和分组交换两种。<br>&emsp;&emsp;（3）控制策略：有集中式和分散式两种。<br>&emsp;&emsp;（4）拓扑结构：有静态和动态两种。</p><h1 id="互连函数"><a href="#互连函数" class="headerlink" title="互连函数"></a>互连函数</h1><p>&emsp;&emsp;为反应不同互连函数的连接特性，每种互连网络可用一组互连函数（interconnection function）来描述。用变量x表示输入（设x=0,1，···，N-1），用函数f(x)表示输出，通过数学表达式建立输入端与输出端的一一对应关系。即在互连函数f的作用下，输入端x连接到输出端f（x）。x和f（x）可以用二进制表示，也可以用十进制表示。<br>&emsp;&emsp;互连函数反映了网络输入数组和输出数组之间对应的置换关系或排列关系，所以互连函数有事也称为置换（permutation）函数或排列函数。<br>&emsp;&emsp;互连函数f（x）有时可以采用循环表示，即（<script type="math/tex">x_0x_1x_2···x_{j-1}</script>）。它表示：</p><p><center> $$ f(x_0)=x_1, f(x_1)=x_2, ···, f(x_{j-1})=x_0 $$ </center><br>&emsp;&emsp;其中，j称为该循环的长度。<br>&emsp;&emsp;下面介绍几种常用的基本互连函数及其主要特征。</p><h2 id="交换函数"><a href="#交换函数" class="headerlink" title="交换函数"></a>交换函数</h2><p>&emsp;&emsp;交换函数用于实现二进制地址编码中第k位互反的输入端与输出端的连接。其表达式为：</p><p><center> $$ E_k(x_{n-1}x_{n-2}···x_{k+1}x_{k}x_{k-1}···x_1x_0)=x_{n-1}x_{n-2}···x_{k+1} \overline{x_k} x_{k-1}···x_1x_0 $$ </center><br>&emsp;&emsp; 交换函数主要用来构建立方体网络和各种超立方体互连网络。它共有<script type="math/tex">n=log_2N</script> 种互连函数。N为结点个数。</p><p><center><img src="002.png" width="75%" height="100%" alt=" "></center></p><p><center><img src="003.png" width="40%" height="100%" alt=" "></center></p><h2 id="均匀洗牌函数"><a href="#均匀洗牌函数" class="headerlink" title="均匀洗牌函数"></a>均匀洗牌函数</h2><p>&emsp;&emsp;均匀洗牌函数（shuffle）定义为：将输入端分成数目相等的两半，前一半和后一半按类似均匀混洗扑克牌的方式交叉的连接到输出端（输出端相当于混洗的结果），其函数可表示为：</p><p><center> $$ S(x_{n-1}x_{n-2}···x_{2}x_{1})=x_{n-2}···x_2x_1x_{n-1} $$ </center><br>&emsp;&emsp; 即把输入端的二进制编号循环左移一位。<br>&emsp;&emsp; 逆均匀洗牌函数于此类似，是将输入端的二进制编号循环右移一位而得到所连接的输出端编号。<br>&emsp;&emsp; 逆均匀洗牌函数是均匀洗牌函数的逆函数。两者的输入端与输出端正好互换位置（互为镜像）。<br>&emsp;&emsp; 用它们代表的链路和交换开关多级组合起来可构成Omega网络与逆Omega网络。</p><p><center><img src="004.png" width="75%" height="100%" alt=" "></center></p><h2 id="蝶式函数"><a href="#蝶式函数" class="headerlink" title="蝶式函数"></a>蝶式函数</h2><p>&emsp;&emsp;蝶式互连函数（butterfly）定义为：</p><p><center> $$ B(x_{n-1}x_{n-2}···x_1x_0)=x_0x_{n-2}···x_1x_{n-1} $$ </center><br>&emsp;&emsp;即把输入端的二进制编号的最高位与最低位互换位置，便得到了输出端的编号。<br>&emsp;&emsp;与均匀混洗函数类似，只用蝶式函数不能实现任意结点之间的连接，但是蝶式变换与交换变换的多级组合可作为构成方体多级网络的基础。</p><p><center><img src="005.png" width="40%" height="100%" alt=" "></center></p><h2 id="反位序函数"><a href="#反位序函数" class="headerlink" title="反位序函数"></a>反位序函数</h2><p>&emsp;&emsp;反位序函数是将输入端二进制编号的位序颠倒过来求得相应输出端的编号。其互连函数为：</p><p><center> $$ R(x_{n-1}x_{n-2}···x_1x_0)=x_0x_1x_2···x_{n-2}x_{n-1} $$ </center><br>&emsp;&emsp;对于N=8的情况，正好B(x)函数等于R(x)函数，其变换图形如下。</p><p><center><img src="006.png" width="40%" height="100%" alt=" "></center></p><h2 id="PM2I函数"><a href="#PM2I函数" class="headerlink" title="PM2I函数"></a>PM2I函数</h2><p>&emsp;&emsp;PM2I函数是一种移数函数，它是将各输入端都循环移动一定的位置后连到输出端。其函数为：</p><p><center> $$ PM2_{+i}(x)=(x+2^i) mod N $$ </center></p><p><center> $$ PM2_{-i}(x)=(x-2^i) mod N $$ </center><br>&emsp;&emsp;其中，0&lt;=x&lt;=N-1, 0&lt;=i&lt;=n-1, n=log_2N, N为结点数。显然，PM2I互连网络共有2n个互连函数。<br>&emsp;&emsp;当N=8时，有6个PM2I函数：</p><p><center> $$ PM2_{+0}: (0&nbsp;1&nbsp;2&nbsp;3&nbsp;4&nbsp;5&nbsp;6&nbsp;7 ) $$ </center></p><p><center> $$ PM2_{-0}: (7&nbsp;6 &nbsp;5&nbsp; 4 &nbsp;3 &nbsp;2 &nbsp;1&nbsp; 0 ) $$ </center></p><p><center> $$ PM2_{+1}: (0&nbsp; 2 &nbsp;4 &nbsp;6 )(1&nbsp; 3 &nbsp;5&nbsp; 7 ) $$ </center></p><p><center> $$ PM2_{-1}: (6&nbsp; 4&nbsp; 2&nbsp; 0 )(7&nbsp; 5&nbsp; 3&nbsp; 1 ) $$ </center></p><p><center> $$ PM2_{\pm2}: (0&nbsp; 4)(1&nbsp; 5)(2&nbsp; 6)(3&nbsp; 7) $$ </center><br>&emsp;&emsp;下图画出了其中3个函数的变形图形。</p><p><center><img src="007.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;PM2I函数是构成数据变换网络的基础。<br>&emsp;&emsp;阵列计算机ILLIAC IV采用<script type="math/tex">PM2_{\pm0}</script>和<script type="math/tex">PM2_{\pm \frac{n}{2}}</script>构成互连网络，实现各处理单元之间的上下左右互连，如下图。</p><p><center><img src="008.png" width="75%" height="100%" alt=" "></center></p><h1 id="互连函数的性能参数"><a href="#互连函数的性能参数" class="headerlink" title="互连函数的性能参数"></a>互连函数的性能参数</h1><p>&emsp;&emsp;网络通常是用有向边或无向边连接有限个结点的图来表示。互连网络的主要特征参数有：<br>&emsp;&emsp;（1）网络规模（network size）：网络中结点的个数。它表示该网络所能连接的部件的数量、<br>&emsp;&emsp;（2）节点度（node degree）：与结点相连接的边数（通道数），包括入度（in degree）和出度（out degree）。进入结点的边数称为入度，从结点出来的边数称为出度。<br>&emsp;&emsp;（3）距离：对于网络中的任意两个结点，从一个结点出发到另一个节点终止所需要跨越的边数的最小值。<br>&emsp;&emsp;（4）网络直径（network diameter）：网络中任意两个结点之间距离的最大值。网络直径应尽可能地小。<br>&emsp;&emsp;（5）结点之间的线长：两个结点之间连线的长度，用米、千米等表示。<br>&emsp;&emsp;（6）等分宽度：当某一网路被分割成相等的两半时，沿切口的边数（通道数）的最小值称为通道等分宽度（channel bisection width），用b表示。而线等分宽度为B=b*w。其中w为通道宽度（用位表示）。该参数主要反映了网络最大流量。<br>&emsp;&emsp;（7）对称性：从任何结点看到的拓扑结构都是相同的网络称为对称网络（symmetric network）。对称网络比较容易实现，编程也比较容易。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;此处概念限定为“互连”，与“互联”区分。&lt;/p&gt;
&lt;h1 id=&quot;互连网络的功能和特征&quot;&gt;&lt;a href=&quot;#互连网络的功能和特征&quot; class=&quot;headerlink&quot; title=&quot;互连网络的功能和特征&quot;&gt;&lt;/a&gt;互连网络的功能和特征&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机系统结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT网站个性化</title>
    <link href="http://yoursite.com/2019/03/06/Hexo%20NexT%E7%BD%91%E7%AB%99%E4%B8%AA%E6%80%A7%E5%8C%96/"/>
    <id>http://yoursite.com/2019/03/06/Hexo NexT网站个性化/</id>
    <published>2019-03-06T14:14:49.000Z</published>
    <updated>2019-04-01T03:04:37.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加字数统计、阅读时长"><a href="#添加字数统计、阅读时长" class="headerlink" title="添加字数统计、阅读时长"></a>添加字数统计、阅读时长</h1><p>&emsp;&emsp;适用于next 6 以后版本，分两步完成</p><ol><li>安装 npm install hexo-symbols-count-time —save</li><li>主配置文件（根hexo目录） 添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line"> symbols: <span class="literal">true</span></span><br><span class="line"> time: <span class="literal">true</span></span><br><span class="line"> total_symbols: <span class="literal">true</span></span><br><span class="line"> total_time: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="添加404公益界面"><a href="#添加404公益界面" class="headerlink" title="添加404公益界面"></a>添加404公益界面</h1><p>&emsp;&emsp;创建页面，在 Hexo 文件夹根目录下 /source/404/index.html；<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404 Not Found：该页无法显示</span><br><span class="line">toc: <span class="literal">false</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">         &lt;title&gt;404&lt;/title&gt;                                                                                                                                        </span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">         &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> homePageName=<span class="string">"返回首页"</span> homePageUrl=<span class="string">"https://yohua.ml"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;部署<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p><h1 id="添加网易云音乐"><a href="#添加网易云音乐" class="headerlink" title="添加网易云音乐"></a>添加网易云音乐</h1><p>&emsp;&emsp;在网易云音乐生成外链，将代码放置合适位置即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=<span class="string">"no"</span> border=<span class="string">"0"</span> marginwidth=<span class="string">"0"</span> marginheight=<span class="string">"0"</span> width=330 height=46 src=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=25638273&amp;auto=0&amp;height=46"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><h1 id="首页隐藏部分文章"><a href="#首页隐藏部分文章" class="headerlink" title="首页隐藏部分文章"></a>首页隐藏部分文章</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>&emsp;&emsp;使用插件hexo-generator-index2。<br>&emsp;&emsp;安装hexo-generator-index2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-index2 --save</span><br><span class="line">$ npm uninstall hexo-generator-index --save</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;修改hexo的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index2 generator是否包含官方的hexo-generator-index，默认true（包含）</span></span><br><span class="line">index2_include_index: <span class="literal">true</span> <span class="comment"># defult is true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置index2 generator，可以是数组或对象</span></span><br><span class="line">index2_generator:</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line">  include:</span><br><span class="line">    - category Web <span class="comment"># 只包含Web分类下的文章</span></span><br><span class="line">  exclude:</span><br><span class="line">    - tag Hexo <span class="comment"># 不包含标签为Hexo的文章</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;插件链接：<br><a href="https://github.com/Jamling/hexo-generator-index2/blob/master/README_zh.md" target="_blank" rel="noopener">https://github.com/Jamling/hexo-generator-index2/blob/master/README_zh.md</a></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>&emsp;&emsp;使用另一个插件，效果更好，可以同时对归档的目录隐藏。<br>&emsp;&emsp;插件地址:<a href="https://github.com/printempw/hexo-sage-posts" target="_blank" rel="noopener">https://github.com/printempw/hexo-sage-posts</a></p><h1 id="在移动设备下启用NexT主题的目录页面和回到顶部按钮"><a href="#在移动设备下启用NexT主题的目录页面和回到顶部按钮" class="headerlink" title="在移动设备下启用NexT主题的目录页面和回到顶部按钮"></a>在移动设备下启用NexT主题的目录页面和回到顶部按钮</h1><p><a href="https://leaferx.online/2017/02/05/EnableTOConMobile/" target="_blank" rel="noopener">https://leaferx.online/2017/02/05/EnableTOConMobile/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加字数统计、阅读时长&quot;&gt;&lt;a href=&quot;#添加字数统计、阅读时长&quot; class=&quot;headerlink&quot; title=&quot;添加字数统计、阅读时长&quot;&gt;&lt;/a&gt;添加字数统计、阅读时长&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;适用于next 6 以后版本，分两步完成&lt;/
      
    
    </summary>
    
      <category term="编程开发" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>指令级并行之动态分支预测技术</title>
    <link href="http://yoursite.com/2019/03/06/%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E4%B9%8B%E5%8A%A8%E6%80%81%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/03/06/指令级并行之动态分支预测技术/</id>
    <published>2019-03-06T07:05:46.000Z</published>
    <updated>2019-04-01T03:04:37.733Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;当要提高ILP（指令级并行）时，控制相关就是会成为主要限定因素之一。所开发的ILP越多，控制相关的制约性就越大，分支预测就要求有更高的准确度。对于每个时钟周期流出多条指令（若为n条，就称为n流出）的处理机来说是非常重要的。这是因为：①在n流出的处理机中，遇到分支指令的可能性增加了n倍。要给处理机连续提供指令，就需要预测分支的结果；②Amdahl定律告诉我们，机器的CPI越小，控制停顿的相对影响就越大。<br>&emsp;&emsp;前面介绍的集中静态处理分支指令的方法，如预测成功和延迟分支。在这些方法中，所进行的操作是预先定义好的，与分支的实际执行情况无关。下面讨论动态的进行分支处理的方法。这些方法是在程序运行的时候，根据分支指令过去的表现来预测其将来的行为。如果分支行为发生了变化，预测结果也随之改变。因此有较好的预测准确度和适应性。<br>&emsp;&emsp;分支预测的有效性不仅取决于其准确性，而且还与预测正确和不正确两种情况下的分支开销有密切关系。这些分支开销是由流水线的结构、预测的方法和预测错误时的恢复策略等诸因素决定的。<br>&emsp;&emsp;采用这些动态分支预测技术的目的有两个：预测分支是否成功和尽快找到分支目标地址（或指令），从而避免控制相关造成流水线停顿。<br>&emsp;&emsp;在这些方法中，需要解决以下关键问题：①如何记录分支的历史信息；②如何根据这些信息来预测分支的去向（甚至取到指令）。<br>&emsp;&emsp;预测错误时，要作废已经预取和分析的指令，恢复现场，并从另一条分支路径上重新取指令，为了能恢复现场，需要在执行预测的目标指令之前将现场保持起来。</p><p><center><img src="001.png" width="75%" height="100%" alt=" "></center></p><h1 id="采用分支历史表"><a href="#采用分支历史表" class="headerlink" title="采用分支历史表"></a>采用分支历史表</h1><p>&emsp;&emsp;分支历史表（Branch History Table，BHT）有时也称为分支预测缓冲器（Branch Prediciton Buffer）。这种方法是最简单的动态分支预测法。它用BHT来记录分支指令最近一次或几次的执行情况（成功或不成功），并据此进行预测。如果只执行分支指令最近一次的历史，BHT中只需要1位二进制位，是最简单的了。为了提高预测的准确度，常采取两位二进制位来记录历史。有研究结果表明，两位分支预测的性能与n位（n&gt;2）分支预测的性能差不多。因而大多数处理机是采用分支预测。下面介绍这种方法。<br>&emsp;&emsp;两位分支预测的状态转换如下图。其中，在00和01状态下，预测分支不成功；在10和11状态下，预测分支成功。连线边上注明了分支指令的实际执行情况。只有连续两次预测错误，才会改变对分支去向的预测。在11状态下连续两次错误预测错误，状态将变为00（预测分支不成功）。</p><p><center><img src="002.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;两位分支预测的操作有两个步骤：①分支预测；②状态修改。当分支指令到达译码段（ID）时，根据从BHT读出的信息进行分支预测，如果是“预测成功”，那么就从分支目标地址取后续的指令。等分支指令的实际执行结果出来后，如果发现预测正确，就继续处理后续的指令，流水线没有断流。否则，就要作废已经预取和分析的指令，恢复现场，并从另一条分支路径中重新取指令。不管是哪种情况，都要按照上图状态进行修改。<br>&emsp;&emsp;在BHT方法中，只对分支是否成功进行预测，对分支目标地址没有提供支持。所以它只有在以下情况中有用：判定分支是否成功所需的时间大于确定分支目标地址所需的时间。在前述5段经典流水线中，由于判定分支是否成功和计算分支目标地址都是在ID段完成，所以BHT方法不会给该流水线带来好处。<br>&emsp;&emsp;一般来说，采用4K的BHT就可以了，如果要进一步提高预测准确率，需要采用更复杂的预测方法。<br>&emsp;&emsp;BHT可以跟分支指令一起存放在指令Cache中，也可以用一个专门的硬件来实现。如果是前者，在取指阶段，就把历史位一起读出来。如果是后者，就在取指令的同时，用指令地址的低位（例如低12位）去访问BHT，读出历史位。</p><h1 id="采用分支目标缓冲器"><a href="#采用分支目标缓冲器" class="headerlink" title="采用分支目标缓冲器"></a>采用分支目标缓冲器</h1><p>&emsp;&emsp;在高性能流水线中，特别是在多流出的处理机中，只准确的预测分支还不够，还要能够提供足够的指令流。许多现代的处理器都要要求每个时钟周期能提供4~8条指令。这需要尽早知道分支是否成功，尽早知道分支目标得治，尽早获取分支目标指令。<br>&emsp;&emsp;对于前述5段流水线，BHT方法是在ID段对BHT进行访问，所以在ID段的末尾，能够获得分支目标地址（在ID段计算出）、顺序下一条指令地址（在IF段计算出）以及预测的结果，如果能再提前一拍（即在IF段）就知道这些信息，那么分支开销就可以减少为0。分支目标缓冲器（Branch Target Buffer，BTB）能够实现这一点。BTB有时也称为分支目标Cache。</p><p><center><img src="003.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;如上图，可以把它看成是用专门硬件实现的一张表格。表格的每一项至少有两个字段：①执行过的成功分支指令的地址；②预测的分支目标地址。第一个字段作为该表的匹配标识。在每次取指令的同时，我们把该指令的地址与BTB中的所有项目的第一个字段进行比较。如果能匹配，就可确定该指令时分支指令且上一次执行时分支成功，据此可以预测这次执行也将分支成功，其分支目标地址由匹配项的第二个字段给出。如果没有匹配的，就把当前指令当作普通的指令（即不是分支指令）来执行。</p><p><center><img src="004.png" width="75%" height="100%" alt=" "></center><br>&emsp;&emsp;当采用BTB后，在流水线各个阶段进行的相关操作如上图所示。<br>BTB的另一种形式是在分支目标缓冲器中存储一条或者多条分支目标处的指令。有的实现方案还保留了分支目标地址，有的则降之去掉了。这种方案的3个潜在好处是：①更快地获得分支目标处的指令；②可以一次提供分支目标处的多条指令，这对于多流出处理器是很有必要的；③便于进行分支折叠优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;当要提高ILP（指令级并行）时，控制相关就是会成为主要限定因素之一。所开发的ILP越多，控制相关的制约性就越大，分支预测就要求有更高的准确度。对于每个时钟周期流出多条指令（若为n条，就称为n流出）的处理机来说是非常重要的。这是因为：①在n流出的处理机
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机系统结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>魅族手机剩余30%电量自动关机解决方法</title>
    <link href="http://yoursite.com/2019/03/06/%E9%AD%85%E6%97%8F%E6%89%8B%E6%9C%BA%E5%89%A9%E4%BD%9930%25%E7%94%B5%E9%87%8F%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/06/魅族手机剩余30%电量自动关机解决方法/</id>
    <published>2019-03-06T06:09:21.000Z</published>
    <updated>2019-04-01T03:04:37.814Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;魅族官方回复<br>&emsp;&emsp;您好，请您按照以下方法排除故障：<br>&emsp;&emsp;1、电池的电量计是什么：用于监测手机电池的电压/电流，计算电量的芯片。<br>&emsp;&emsp;2、电量计不准确可能导致的情况：充不满电、不掉电、快速掉电、电量跳变、高电量关机……<br>&emsp;&emsp;3、电量计校准方法：<br>&emsp;&emsp;方法一：满电后持续充电<br>&emsp;&emsp;使用充电器给手机充电，充满至100%后继续保持充电状态1小时左右，即可完成电量计校准。<br>&emsp;&emsp;注意过程中手机需保持休眠，不可**作或者APP后台唤醒。（建议睡觉时，将手机清理后台、关闭网络充电一晚上。）<br>&emsp;&emsp;方法二：完整充放电并静置<br>&emsp;&emsp;手机先充满电，然后正常使用至没电关机，关机后等待2小时再进行充电即可校准电量计。<br>&emsp;&emsp;方法三：低电量关机静置<br>&emsp;&emsp;当手机电量低于10%时，手动将手机关机，1小时后再开机即可校准电量计。</p><p>&emsp;&emsp;实测方法二有效，需要低电量关机充满电并保持充电状态1小时，重复两次。完成电量校准。</p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://service.meizu.com/faq/type/17002?sub=17004" target="_blank" rel="noopener">https://service.meizu.com/faq/type/17002?sub=17004</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;魅族官方回复&lt;br&gt;&amp;emsp;&amp;emsp;您好，请您按照以下方法排除故障：&lt;br&gt;&amp;emsp;&amp;emsp;1、电池的电量计是什么：用于监测手机电池的电压/电流，计算电量的芯片。&lt;br&gt;&amp;emsp;&amp;emsp;2、电量计不准确可能导致的情况：充不满电
      
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="魅族" scheme="http://yoursite.com/tags/%E9%AD%85%E6%97%8F/"/>
    
      <category term="手机" scheme="http://yoursite.com/tags/%E6%89%8B%E6%9C%BA/"/>
    
      <category term="手机电池" scheme="http://yoursite.com/tags/%E6%89%8B%E6%9C%BA%E7%94%B5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>指令级并行之多指令流出技术</title>
    <link href="http://yoursite.com/2019/03/06/%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E4%B9%8B%E5%A4%9A%E6%8C%87%E4%BB%A4%E6%B5%81%E5%87%BA%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/03/06/指令级并行之多指令流出技术/</id>
    <published>2019-03-06T04:31:36.000Z</published>
    <updated>2019-04-01T03:04:37.764Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;虽然希望CPI越小越好，但如果是每次只流出一条指令，CPI就不可能小于1。如果想再进一步提高性能，使CPI小于1，就必须采取多柳树技术（multiple issure），在每个时钟周期流出多条指令。<br>&emsp;&emsp;多流出处理机有两种基本风格：超标量（superscalar）和超长指令字VLIW（Very Long Instruction Word）。超标量在每个时钟周期流出的指令条数不固定，依代码的具体情况而定，不过有个上限。设这个上限为n，就成该处理机为n流出。对于超标量处理机，既可以通过编译器进行静态调度，也可以基于Tomasulo算法进行动态调度。静态调度的超标量处理机易班采用按序执行，而动态调度的处理机一般采用乱序执行。<br>&emsp;&emsp;与超标量处理机不同，VLIW处理机在每个时钟周期流出的指令条数是固定的，这些指令构成一条长指令或者一个指令包，在这个指令包中，指令之间的并行性是通过指令显式地表示出来的。这种处理机的指令调度是由编译器静态完成的。<br>&emsp;&emsp;超标量处理机与VLIW处理机相比有两个优点：<br>&emsp;&emsp;（1）超标量结构对程序员是透明的，因为处理机能自己检测下一条指令能否流出，从而不需要重新排列指令来满足指令的流出。<br>&emsp;&emsp;（2）即使是没有经过编译器针对超标量结构进行调度优化的代码或是旧的编译器生成的代码也可以运行，当然运行的效果不会很好。要想达到很好的效果，方法之一就是使用动态超标量调度技术。</p><h1 id="基于静态调度的多流出技术"><a href="#基于静态调度的多流出技术" class="headerlink" title="基于静态调度的多流出技术"></a>基于静态调度的多流出技术</h1><p>&emsp;&emsp;典型的超标量处理机每个时钟周期可流出1~8条指令。在静态调度的超标量处理机中，指令按序流出。所有的冲突检测都在流出时进行，由硬件检测当前流出的指令之间是否存在冲突以及当前流出的指令与正在执行的指令是否有冲突。如果当前流出的指令序列中，某条指令存在上述冲突，那么就只流出该指令之前的指令。</p><h1 id="基于动态调度的多流出技术"><a href="#基于动态调度的多流出技术" class="headerlink" title="基于动态调度的多流出技术"></a>基于动态调度的多流出技术</h1><p>&emsp;&emsp;在多流出处理机中，动态调度技术是提高性能的一种方法。动态调度不仅在有数据冲突的时候也能提高性能，而且还有可能克服指令流出所受的限制。尽管从硬件角度看，在每个时钟周期最多只能启动一个整数和一个浮点操作的执行，但是动态调度可以使得在流出时不受这个限制，至少在保留站全部被占用之前是如此。<br>&emsp;&emsp;假如要对Tomasulo算法进行拓展，使之能够支持超标量流水线，但是又不想乱序的向保留站流出指令，应为这会破坏程序语义。为了充分利用动态调度的好处，应该去掉每个时期周期只能流出一条整数指令和一条浮点操作指令的限制。但这会大大地增加指令流出的硬件复杂度。<br>&emsp;&emsp;另一种比较简单的方法是：将整数所用的表结构与浮点用的表结构分离，分别进行处理，这样就可以同时流出一条浮点指令和一条整数指令到各自的保留站中。<br>&emsp;&emsp;有两种不同的方法可以用来在采用动态调度的处理机中实现多流出。他们都是监理在这样一个认识之上的：关键在于对保留站的分配和对流水线控制表格的修改。一种方法是在半个时钟周期里完成露出步骤，这样一个时钟周期就能处理两条指令。另一种方法是设置一次能同时处理两条指令的逻辑电路。线代的流出4条或4条以上指令的超标量处理机经常是两种方法都采用。</p><h1 id="超长指令字技术"><a href="#超长指令字技术" class="headerlink" title="超长指令字技术"></a>超长指令字技术</h1><p>&emsp;&emsp;与超标量不同，超长指令字技术在指令流出时不需要进行复杂的冲突检测，而是依靠编译器在编译时找出指令之间潜在的并行性，并通过指令调度把可能出现的数据冲突减少到最小，最后把能并行执行的多条指令组装成一条很长的指令。这种指令经常是100到几百位，超长指令字因此得名。<br>&emsp;&emsp;在VLIW处理机中一般设置多个功能部件。相应的，指令字也被分割成多个字段，每个字段称为一个操作槽，直接独立地控制一个功能部件。为了使功能部件充分忙碌，程序指令序列中应有足够的并行性，从而尽量填满每个操作槽。这种并行性是依靠编译器来挖掘的。编译器把循环展开，并在展开后的代码中进行指令调度。<br>&emsp;&emsp;在VLIW处理机中，所有的处理和指令安排都是由编译器完成的，它不需要超标量处理机中用于指令流出控制的硬件，因而控制硬件比较简单。特别是当流出宽度增加时，VLIW技术的优点更明显。</p><h2 id="超长指令字技术缺点"><a href="#超长指令字技术缺点" class="headerlink" title="超长指令字技术缺点"></a>超长指令字技术缺点</h2><p>&emsp;&emsp;（1）程序代码长度增加<br>&emsp;&emsp;原因有：一个是为了提高并行性而进行的大量的循环展开，另一个是指令字中的操作槽并非总能填满。虽然编译器会尽量使得各操作部件充分忙碌，但总会出现无法安排指令到操作部件执行的情况，这时指令字中与该操作部件对应的操作槽就没有被利用起来，这会造成空间上的浪费。<br>&emsp;&emsp;为解决此问题，可采用指令共享立即数字段的方法，或者采用指令压缩存储、调入Cache或译码时展开的方法。<br>&emsp;&emsp;（2）采用了琐步机制<br>&emsp;&emsp;由于没有冲突检测硬件，早期VLIW技术都采用琐步机制。在新近的VLIW处理机中，各功能部件有了更多的独立性。可以通过设置适当的硬件动态检测机制，来允许指令流出后的非同步执行。<br>&emsp;&emsp;（3）机器代码的不兼容性<br>在VLIW中，编译生成代码时，是充分利用了指令集的特点以及具体流水线结构的细节（如指令流出数目、功能单元延迟时间等都不同）来进行优化的。所以在不同配置的VLIW中，机器代码差别很大。即使是同一系列的VLIW也难以实现机器代码的兼容。<br>&emsp;&emsp;为解决此问题，可以采用机器代码翻译或仿真的方法。这两种方法是解决所有移植问题的通用方法。</p><h1 id="多流出处理器受到的限制"><a href="#多流出处理器受到的限制" class="headerlink" title="多流出处理器受到的限制"></a>多流出处理器受到的限制</h1><p>&emsp;&emsp;主要受以下三方面影响：<br>&emsp;&emsp;（1）程序所固有的指令级并行（ILP）。<br>&emsp;&emsp;（2）硬件实现上的困难。<br>&emsp;&emsp;（3）超变量和超长指令字处理机器固有的技术限制。</p><h1 id="超流水线处理机"><a href="#超流水线处理机" class="headerlink" title="超流水线处理机"></a>超流水线处理机</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;虽然希望CPI越小越好，但如果是每次只流出一条指令，CPI就不可能小于1。如果想再进一步提高性能，使CPI小于1，就必须采取多柳树技术（multiple issure），在每个时钟周期流出多条指令。&lt;br&gt;&amp;emsp;&amp;emsp;多流出处理机有两种基
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机系统结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>指令级并行之指令的动态调度</title>
    <link href="http://yoursite.com/2019/03/06/%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E4%B9%8B%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8A%A8%E6%80%81%E8%B0%83%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/03/06/指令级并行之指令的动态调度/</id>
    <published>2019-03-06T03:27:05.000Z</published>
    <updated>2019-04-01T03:04:37.738Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在前述的流水线属于静态调度的流水线。在这样的流水线中，当取出的指令与已经在流水线中执行的指令不存在数据相关，或者虽存在数据相关但可以通过定向机制将相关隐藏时，就可以流出这条指令。如果数据相关不能被隐藏，冲突检测硬件就会从使用该数据的指令开始，使流水线停顿（stall），不再取指令和流出指令。<br>&emsp;&emsp;静态调度的流水线依靠编译器对代码进行静态调度，以减少相关和调度。之所以成为静态调度，是因为它不是在程序执行的过程中，而是在编译期间进行代码调度和优化。静态调度通过把相关的指令拉开距离来减少可能产生的停顿。<br>&emsp;&emsp;动态调度是在程序的执行过程中，依靠专门硬件对代码进行调度。许多线代处理器都采用了动态调度技术。动态调度能在保持数据流和异常行为的情况下，通过硬件对指令执行顺序进行重新安排，减少数据相关导致的停顿。<br>&emsp;&emsp;动态调度有许多优点：①能够处理一些编译时情况不明的相关（如涉及存储器访问的相关），并简化了编译器；②能够使本来是面向某一流水线优化编译的代码在其他的流水线（动态调度）上也能高效的执行。当然，动态调度的这些优点是以硬件复杂性的显著增加为代价的。</p><h1 id="动态调度的基本思想"><a href="#动态调度的基本思想" class="headerlink" title="动态调度的基本思想"></a>动态调度的基本思想</h1><p>&emsp;&emsp;前面讨论的简单流水线有一个主演局限性，就是指令时按照程序顺序流出和按序执行的。如果某条指令在流水线中被停顿了，那么后面所有的指令都停止前进。如果相近的指令存在相关，近很可能导致冲突，引起停顿。如果系统中有多个功能部件，那么这些部件很可能因为没有指令可处理而处于空闲状态，系统效率低下。<br>&emsp;&emsp;如果可以不要求按程序顺序执行指令，那么就能进一步提高性能。<br>&emsp;&emsp;为了支持乱序执行，将前述5段流水线的译码段（ID）细分为以下两个段：<br>&emsp;&emsp;（1）流出：指令译码，并检查是否存在结构冲突。如果不存在结构冲突，就将指令流出。<br>&emsp;&emsp;（2）读操作数：等待数据冲突消失，然后读操作数。<br>&emsp;&emsp;可以看出，指令的流出还是按序流出，但它们在读操作数段可能停顿和互相跨越，因而进入执行段就可能已经乱序了。但是，原来不会发生的冲突在乱序执行时，就可能发生了。Tomasulo算法可以通过使用寄存器重命名来消除它们。<br>&emsp;&emsp;采用动态调度的流水线支持多条指令同时处于执行状态，这是动态调度的一大优点。但这要求具有多个功能部件，或者流水功能部件，或者两者兼而有之。<br>&emsp;&emsp;指令乱序完成大大增加了异常处理的复杂度。动态调度要保持正确的异常行为，即：只有那些在程序严格按程序顺序执行时会发生的异常，才能真正发生。为此动态调度处理机要做到：对于一条会产生异常的指令来说，只有当处理机确切地知道该指令将被执行后，才允许它产生异常。<br>&emsp;&emsp;即使保持了正确的异常行为，动态调度处理机仍可能发生不精确异常。所谓不精确异常是指：当执行指令i导致发生异常时，处理机的现场（状态）与严格按程序顺序执行时指令i的现场不同。反之，如果发生异常时，处理机的现场跟严格按程序顺序执行时指令i的现场相同，就称为是精确异常。不精确异常使得在异常处理后难以接着继续执行程序。<br>&emsp;&emsp;之所以会产生不精确的异常，是因为当一场发生（指令i）时：①流水线可能已经执行完按程序顺序是位于指令i之后的指令；②流水线可能还没完成按程序顺序是指令i之前的指令。<br>&emsp;&emsp;记分牌算法和Tomasulo算法是两种比较典型的动态调度算法。Tomasulo算法比记分牌算法改进很多，是一种更强的算法。许多开发指令级并行的现代处理机都采用了Tomasulo算法或其变形。</p><h1 id="Tomasulo算法"><a href="#Tomasulo算法" class="headerlink" title="Tomasulo算法"></a>Tomasulo算法</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在前述的流水线属于静态调度的流水线。在这样的流水线中，当取出的指令与已经在流水线中执行的指令不存在数据相关，或者虽存在数据相关但可以通过定向机制将相关隐藏时，就可以流出这条指令。如果数据相关不能被隐藏，冲突检测硬件就会从使用该数据的指令开始，使流水线
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机系统结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>指令级并行基本概念</title>
    <link href="http://yoursite.com/2019/03/06/%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/03/06/指令级并行基本概念/</id>
    <published>2019-03-05T17:26:26.000Z</published>
    <updated>2019-04-01T03:04:37.769Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;自20世纪80年代中期以来，几乎所有的处理机都利用流水线来使指令重叠并行执行，以达到提高性能目的。这种指令之间存在的潜在并行性成为指令级并行（ILP）。通过利用各种技术，在流水线思想的基础上进一步扩展，开发出更多的指令级并行。<br>&emsp;&emsp;开发ILP主要分为两类：主要基于硬件的动态开发以及基于软件的静态开发方法。在实际开发中，往往需要两者兼用。特别是，把硬件与软件技术以及动态的方法与静态方法结合起来，才能充分开发程序中潜在的指令级并行。<br>&emsp;&emsp;流水线处理机的实际CPI等于理想流水线的CPI加上各类停顿的时钟周期：</p><p><center> $$ CPI_{流水线}=CPI_{理想}+停顿_{结构冲突}+停顿_{数据冲突}+停顿_{控制冲突} $$ </center><br>&emsp;&emsp;其中，<script type="math/tex">CPI_{理想}</script>是衡量流水线最高性能的一个指标。通过减少该式右边各项，就能减小总的CPI，从而提高IPC（Instructions Per Cycle，每个时钟周期完成的指令条数）。<br>&emsp;&emsp;相关是程序固有的一种属性，它反映了程序中指令之间的相互依赖关系。而具体的一次相关是否会导致实际冲突的发生以及该冲突会带来多长的停顿，则是流水线的属性。<br>&emsp;&emsp;主要从以下两个方面解决相关问题：<br>&emsp;&emsp;（1）保持相关，但避免发生冲突。<br>&emsp;&emsp;（2）通过代码变换，消除相关。<br>&emsp;&emsp;指令调度是一种用以避免冲突的主要方法，但它不改变相关。通过动态调度代码的硬件方法，可以消除某些相关。<br>&emsp;&emsp;由于相关的存在，必须保持程序顺序。程序书序是指，有源程序确定的在完全串行方式下指令的执行顺序。只有在可能影响程序正确性的情况下，才需要保持程序顺序。<br>&emsp;&emsp;对于正确的执行程序来说，必须保持的最关键的两个属性是：数据流（data flow）和异常行为（exception behavior）。<br>&emsp;&emsp;保持异常行为是指：无论怎么改变指令的执行顺序，都不能改变程序中异常的发生情况。<br>&emsp;&emsp;如果能做到保持程序的数据相关和控制相关，就能保持程序的数据流和异常行为。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;自20世纪80年代中期以来，几乎所有的处理机都利用流水线来使指令重叠并行执行，以达到提高性能目的。这种指令之间存在的潜在并行性成为指令级并行（ILP）。通过利用各种技术，在流水线思想的基础上进一步扩展，开发出更多的指令级并行。&lt;br&gt;&amp;emsp;&amp;e
      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="计算机系统结构" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2019/03/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/03/排序算法/</id>
    <published>2019-03-03T15:46:21.000Z</published>
    <updated>2019-04-01T03:04:37.773Z</updated>
    
    <content type="html"><![CDATA[<center><img src="001.png" width="75%" height="100%" alt=" "></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;
&lt;img src=&quot;001.png&quot; width=&quot;75%&quot; height=&quot;100%&quot; alt=&quot; &quot;&gt;
&lt;/center&gt;

      
    
    </summary>
    
      <category term="专业知识" scheme="http://yoursite.com/categories/%E4%B8%93%E4%B8%9A%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
