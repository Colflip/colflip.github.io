<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[计算机中的流水线]]></title>
    <url>%2F2019%2F02%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[基本概念&emsp;&emsp;和工业生产中的流水线类似，在计算机系统中，把一个重复的过程，分解成若干个子过程，每个子过程由专门的功能部件来实现。将多个处理过程在时间上错开，依次通过各功能段，每个子过程都可以与其他子过程同时并行进行。这就是流水线技术。&emsp;&emsp;流水线中的每个字过程及其功能部件成为流水线的段或级，段与段之间互相连接形成流水线。流水线的段数成为流水线的深度。&emsp;&emsp;把流水线技术应用于运算的执行过程，形成运算操作流水线；吧流水线技术应用于指令的解释执行过程，形成指令流水线。流水线的工作过程常常采用时空图的方法描述。 流水线特点(1) 流水线把一个处理工程分解为若干子过程（段），每个子过程都由一个专门的功能部件实现。(2) 流水线中各段的时间应该尽可能相等。否则，将引起流水线阻塞、断流，因为时间长的段将成为流水线的瓶颈，此时流水线中的其他功能部件就不能充分发挥作用。(3) 流水线每个功能部件的后面都有一个缓冲寄存器（锁存器），称为流水寄存器。其作用是在相邻两段之间相互传送数据，保证提供后面要用到的数据，并把各段的处理工作互相隔离。(4) 流水线技术适合于大量重复的时序过程，只有在输入端不断地输入任务，才能充分发挥流水线的效率。(5) 流水线需要通过实践和排空时间。通过时间是第一个任务从进入到流出的时间段，排空时间是最后一个任务的时间段。在这两个时间段内，流水线都不是满载。效率未得到充分发挥。 流水线分类从完成功能角度(1)单功能流水线：只能完成一种固定功能的流水线。(2)多功能流水线：可以以各段进行不同的连接，而实现不同的功能的流水线。但要保证不能发成冲突。 按照同一时间段内各段之间的连接方式(1)静态流水线：在同一时间段内，多功能流水线的各段只能按照同一功能的连接工作。当按另一种连接实现其他功能时，必须等按照原来连接方式处理的所有任务都流出流水线之后，才能改变连接。(2)动态流水线：在同一时间段内，多功能流水线的各段可以按照不同连接，同时执行多种功能。 从流水点级别角度(1)部件级流水线（运算操作流水线）：它把处理机的算术处理运算部件分段，使得各种类型的运算操作能够按照流水方式进行。(2)处理机级流水线（指令流水线）：它是把指令的解释过程分成不同过程，按照流水方式处理。(3)处理时间流水线（宏流水线）：它是由两个或两个以上处理机串行连接起来，对同一数据流进行处理，每个处理机完成整个任务的一部分。前一个处理机的输出结果存入存储器中，作为后一个处理机的输入。这一般属于异构型多处理机系统，它对提高各处理机的效率有很大的作用。 从反馈角度(1)线性流水线：流水线的各段串行连接，没有反馈回路。(2)非线性流水点：流水线中除了有串行的连接外，还有反馈回路。常用于递归或组成多功能流水线。&emsp;&emsp;在非线性流水线中，一个重要的问题是确定什么时候向流水线引进新任务，才能使该任务不会与先前进入流水线的任务发生冲突——争用流水段。这就是非线性流水线的调度问题。 从任务流入流出角度(1)顺序流水线：流水线输出端任务流出的顺序与输入端任务流入的顺序完全相同。(2)乱序流水线，又称无序流水线、错序流水线、异步流水线。&emsp;&emsp;通常把指令执行部件中采用流水线的处理机成为流水线处理机。如果处理机不具有向量数据表示和向量指令，仅对标量数据进行流水处理，如IBM 360/91、Amdahl 470V/6，称为标量处理机。具有向量表示和向量指令的处理机，称为向量流水处理机。向量处理机是向量数据表示和流水技术的结合。 流水线性能指标&emsp;&emsp;主要有吞吐率、加速比和效率三个指标。 吞吐率&emsp;&emsp;吞吐率TP（ThroughPut）是指在单位时间内流水线所完成的任务数量或者输出结果的数量。 $ TP=\frac{n}{T_k} $&emsp;&emsp;其中，n为任务数，{T_k} 是处理完成n个任务所用的时间。 $ \begin{pmatrix} -1 & -1 & 0 & 2 & 0 \\ -2 & 0 & 0 & 1 & 1 $ 加速比效率]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统设计的定量原理]]></title>
    <url>%2F2019%2F02%2F26%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%9A%E9%87%8F%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[以经常性事件为重点Amdahl定律&emsp;&emsp;此定律指出：加快某个部件执行速度所能获得的系统性能提升，受限于此部件的执行时间占系统中总执行时间的占比。&emsp;&emsp;系统加速比公式：&emsp;&emsp;&emsp;&emsp; 系统加速比=\frac {系统性能_{改进后}} {系统性能_{改进前}}=\frac {总执行时间_{改进前}} {总执行时间_{改进后}}&emsp;&emsp;设出定义：(1)可改进比例：在改进前的系统中，可改进部分的执行时间在总的执行时间中所占的比例。(2)部件加速比：可改进部分在改进后性能提高的倍数。它是改进前所需执行时间和改进后所需执行时间的比。&emsp;&emsp;由(1)(2)得出：&emsp;&emsp;&emsp;&emsp; 总执行时间_{改进后}=\frac{可改进比例* 总执行时间_{改进前}}{部件极速比}+不可改进比例*总执行时间_{改进前}&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; =总执行时间_{改进前}* [(1-可改进比例)+ \frac{可改进比例}{部件加速比}]&emsp;&emsp;&emsp;&emsp; 系统加速比=\frac {总执行时间_{改进前}} {总执行时间_{改进后}}=\frac {1}{(1-可改进比例)+\frac{可改进比例}{部件加速比}} CPU性能公式&emsp;&emsp;&emsp;&emsp; CPU时间=执行程序所需的时钟周期数* 时钟周期时间&emsp;&emsp;其中，时钟周期时间是系统时钟频率的倒数，即 时钟周期时间=\frac{1}{f}。&emsp;&emsp;引入新参数CPI（Cycles Per Instruction，每条指令的平均时钟周期数），有：&emsp;&emsp;&emsp;&emsp; CPI=\frac{执行程序所需的时钟周期数}{所执行的指令条数}&emsp;&emsp;则推出CPU性能公式：&emsp;&emsp;&emsp;&emsp; CPU时间=IC* CPI* 时钟周期时间&emsp;&emsp;其中，IC为所执行的指令条数。&emsp;&emsp; 根据上述公式，得知CPU的性能取决于以下三个参数：&emsp;&emsp;&emsp;(1) 时钟周期时间：取决于硬件实现技术和计算机组成。&emsp;&emsp;&emsp;(2) CPI：取决于计算机组成和指令集结构。&emsp;&emsp;&emsp;(3) IC：取决于指令集结构和编译技术。&emsp;&emsp;其他公式：&emsp;&emsp;&emsp;&emsp; CPU时钟周期数=\sum\limits_{i=1}^n{(CPI_i*IC_i)}&emsp;&emsp;其中，{IC_i}为程序执行的过程中第i种指令出现的次数，{CPI_i}为执行第i种指令所需的平均时钟周期，n为指令的种数。&emsp;&emsp;&emsp;&emsp; CPU时间=CPU时钟周期数*时钟周期时间=\sum\limits_{i=1}^n{(CPU_i*IC_i)* 时钟周期时间}&emsp;&emsp;&emsp;&emsp; CPI=\frac{时钟周期数}{IC}= \frac{\sum\limits_{i=1}^n{(CPI_i*IC_i)}}{IC}= \sum\limits_{i=1}^n{(CPI_i* \frac{IC_i}{IC})}&emsp;&emsp;其中，(\frac{IC_i}{IC})反映了第i种指令在程序执行过程中所占的比例。 程序的局部性原理]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并行概念]]></title>
    <url>%2F2019%2F02%2F26%2F%E5%B9%B6%E8%A1%8C%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[基本概念指计算机系统在同一时刻或者同一时间间隔内进行多种运算或者操作。在时间上相互重叠。包括同时性与并发性两种含义。 同时性———两个或者两个以上事件在同一时刻发生。 并发性———两个或者两个事件在同一时间间隔内发生。 分类从处理数据角度：字串韦串，字串位并，字并位串，字并位并。从执行程序角度：指令内部并行，指令级并行，线程级并行，任务级或过程级并行，作业或程序级并行。 发展单机系统中的发展通过“部件功能专用化”实现时间重叠；多体存储器和多操作部件都是通过资源重复形式发展，如将通用部件（如加法部件，减法部件等）重复设置多个，进一步发展成为并行处理机（阵列处理机）；通过模拟多处理机的功能，形成虚拟机，实现资源共享。 多级系统中的发展多机系统分为：同构型多处理机，异构型多处理机，分布式系统。反应在耦合度上，分为紧密耦合和松散耦合。成为紧密耦合系统（直接耦合系统）和松散耦合系统（间接耦合系统）。松散耦合系统又分为两种形式，一种是多台计算机和桐乡的外存储连接，通过功能专用化，把不同功能计算机处理的结果以文件或者数据集的形式送到共享外存储器，以供其他计算机继续处理。另一种是计算机网络，通过通信线路连接，实现了更大范围的资源共享。 提高并行性途径时间重叠，资源重复，资源共享。现行计算机系统中，经常是同时运用时间重叠和资源重复两种措施。 时间重叠在并行性概念中，引入时间概念，让多个处理过程在时间上相互错开，轮流重叠的使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。典型实例是流水线技术。 资源重复引入空间因素，通过重复设置硬件资源，大幅提高系统性能。 资源共享是一种软件方法，它使多个任务按一定时间顺序轮流使用一套硬件设备。多道程序、分时系统就是遵循这一途径产生。资源共享既降低了成本，又提高了计算机设备的利用率。]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪录片《大明宫》]]></title>
    <url>%2F2019%2F02%2F24%2F%E7%BA%AA%E5%BD%95%E7%89%87%E3%80%8A%E5%A4%A7%E6%98%8E%E5%AE%AB%E3%80%8B%2F</url>
    <content type="text"><![CDATA[片尾曲《大明宫》(网易云)前世风雨后世尘烟亭台宫阙都成残垣繁华落尽王侯长眠谁的功过万世流传时间蔓延万代千年人生太短暂怎守江山我站在人间看风云变幻任由残砖碎瓦铭刻变迁岁月流淌历尽沧桑昨日辉煌今在何方我思我想亦歌亦狂才闻欢笑又见泪光时间蔓延万代千年岁月走不完朝代轮转我站在人世间数兴衰的循环多想长生不老再看江山金碧辉煌羽衣霓裳人间天上唯你无双耀眼光芒无尽惆怅萦绕着每颗心梦回大唐]]></content>
      <tags>
        <tag>人文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown常用数学公式及符号]]></title>
    <url>%2F2019%2F02%2F23%2FMarkdown%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%8F%8A%E7%AC%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[括号() [] 直接写就行，而 {} 则需要转义“{ ” “}” 上下标a_下标，b^上标：a_b， a^c 分数 \frac {分子} {分母} ：\frac {分子} {分母} 求和符号及其上下限位置默认情况下：默认行间公式\sum_{k=1}^n{x_k}上下限标注在上下： \sum_{k=1}^n{x_k}可强制修改：强制行间公式\sum\nolimits_{k=1}^n{x_k}上下限标注在右侧： \sum\nolimits_{k=1}^n{x_k}参考链接：https://blog.csdn.net/xingxinmanong/article/details/78528791https://www.cnblogs.com/q735613050/p/7253073.htmlhttps://blog.csdn.net/thither_shore/article/details/52260742]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse Java开发采坑]]></title>
    <url>%2F2019%2F02%2F02%2FEclipse-Java%E5%BC%80%E5%8F%91%E9%87%87%E5%9D%91%2F</url>
    <content type="text"><![CDATA[eclipse无法解析导入 javax.servlet 的解决方法出现上述问题的原因是你的Eclipse项目没有导入JSP运行所需要的Tomcat类库，主要是servlet-api.jar文件(或者servlet.jar），tomcat容器里面有这文件，在以下位置：%Tomcat_Home%/common/lib/servlet-aip.jar,要将其导入到项目的构建路径中(如果你用的是Eclipse). 导入方法：右击你的Eclipse项目，选择 “构建路径”—“配置构建路径”。点击“库”选项卡，单击右边的“添加库”按钮，在出现的“添加库”对话框中选中“服务器运行时”，单击“下一步”，在出现的对话框中选中你使用的Tomcat服务器,例如，我的是：Apache Tomcat v5.5,单击“完成”既可。这时你的Tomcat类库就添加到当前项目中了。依次展开Java Resources: src-&gt;Libraries，就能看到Apache Tomcat v5.5[Apache Tomcat v5.5]类库已经添加到当前项目中了。 request中的setCharacterEncoding方法不识别request中的setCharacterEncoding方法作用是用指定的编码集去覆盖request对象中的默认的”ISO-8859-1”编码集，这样request.getParameter(“”)方法就会用新的编码集去解码，必须在第一次使用request时就要调用这个方法来设置编码集，否则该方法就会无效。单独加载weblogic.jar，应为它会用到request网上说servlet-api.jar版本必须在2.4之后上面的方法都试过后，我的setCharacterEncoding（“utf-8”）方法依然不识别；简直气人啊；最后用 where java 命令查看安装的jdk发现jdk地址显示“c:\programData\Oracle\java\javapath……java.exe”和环境变量配置的地址不一样，果断删除，并将path环境变量里的jdk相关配置放到最前面]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[魅蓝s6获取完整root]]></title>
    <url>%2F2019%2F02%2F01%2F%E9%AD%85%E8%93%9Ds6%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4root%2F</url>
    <content type="text"><![CDATA[参考链接https://romprovider.com/2018/07/meizu-s6-root-twrp/amp/https://tieba.baidu.com/p/6023374283]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《自题金山画像》小记]]></title>
    <url>%2F2018%2F11%2F08%2F%E3%80%8A%E8%87%AA%E9%A2%98%E9%87%91%E5%B1%B1%E7%94%BB%E5%83%8F%E3%80%8B%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[自题金山画像 苏轼 心似已灰之木，身如不系之舟。 问汝平生功业，黄州惠州儋州。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;他题这首诗的时候，不知道会是悲戚的，还是无奈的。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从眉山和父亲、弟弟出发时对未来的无限憧憬，在汴梁考场金榜题名时的意气风发，到文坛领袖的赏识，再到仕途前辈的提携，自己也奋力的展现自己的抱负理想，没想到随转直下的，是官场政敌的恶意诋毁，随之而来的是贬嘀出京，新党政敌倒台被召还朝，引不满旧党的腐败现象，进行抨击，至此苏轼是既不能容于新党，又不能见谅于旧党，再贬岭南，而后一贬再贬，颠沛流离在外大半生。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直到又看到这幅画，题了这首诗，回顾了自己的前半生。虽然诗文名遍天下，却始终没能实现自己的政治抱负，但他应该还是乐观的，只因他是苏东坡，独一无二的苏东坡。]]></content>
      <tags>
        <tag>人文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈利用hexo框架和GitHub实现个人博客搭建]]></title>
    <url>%2F2018%2F10%2F31%2F%E5%88%A9%E7%94%A8hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E5%92%8CGitHub%E5%AE%9E%E7%8E%B0%E5%BB%BA%E7%AB%99%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上。基本原理是用Git将hexo博客在本地编译后的文件，上传到GitHub，通过地址访问。通过此种方法看到的，严格上并不是一个网站系统，而只是托管在GitHub上的一堆静态网页。但我们可以在本地更新后，同步到GitHub来实现和网站系统一样的功能。 环境准备本地环境准备&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载并安装Git&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载并安装Node.js 账号注册&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册GitHub账号 建站过程&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下过程在Git中进行。 安装hexo1$ install hexo 本地调试123$ hexo clean;//清理$ hexo generate;//编译$ hexo sever;//开启本地服务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开浏览器，通过http://localhost:4000访问。 在GitHub上创建存储库&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命名方式为：用户名.github.io。 修改 站点配置 文件_config.yml1234deploy: type: git repo: https://github.com/用户名/用户名.github.io branch: master 部署到GitHub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次可能需要登录GitHub账户。1$ hexo deploy;//部署 访问&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过 https://用户名.github.io 访问。 功能拓展更改主题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以再hexo官网查找主题，本站使用了next 主题。 启用本地搜索&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装1$ npm install hexo-generator-searchdb --save &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改 站点配置 文件_config.yml12345search: path: search.xml field: post format: html limit: 10000 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改 主题配置文件12local_search: enable: true 第三方评论&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用LiveRe(来必力)等。 网站统计&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用百度统计等。 更改访问域名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以在github项目库setting中设置自己的域名。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在freenom.com 可以注册.ml, .tk等结尾的免费顶级域名。 博文撰写 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以用符合Markdown语法的软件写自己的博客。]]></content>
      <tags>
        <tag>教程</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《魔道祖师》——每个人都是一个江湖]]></title>
    <url>%2F2018%2F10%2F28%2F%E9%AD%94%E9%81%93%E7%A5%96%E5%B8%88%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B1%9F%E6%B9%96%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间，不经意间看到了《魔道祖师》的动画，感觉很棒。无论是动画形象，题材。比那些大IP好很多，为了补贴经费啥都干，吃相太难看。苍山乱烟外，玉树微雨里。举目人不见，凄凄风又起。（来源网络） 引 前世的魏无羡万人唾骂，声名狼藉。 被情同手足的师弟带人端了老巢， 纵横一世，死无全尸。 曾掀起腥风血雨的一代魔道祖师，重生成了一个…… 脑残。 还特么是个人人喊打的断袖脑残！！ 我见诸君多有病，料诸君见我应如是。 但修鬼道不修仙，任你千军万马，十方恶霸，九州奇侠，高岭之花， 但凡化为一抔黄土，统统收归旗下，为我所用，供我驱策！ 主题曲歌词 风雨前尘 傲视苍穹 轻抚陈情亦从容 云深不知处 天子笑坛中 世事无常 独醉梦一场 探正邪两道 观世间喧嚣 孤一身战江湖 亦不曾 将内心辜负 潇洒人间道 善恶都离空 却抹不掉心中伤痕 这一世 浮生若梦 纵然与世无争 道不同义在心中 怎奈侠肝义胆 却成一场空 善恶是非分明 爱恨界限不清 相识就像是一场梦 轮回重生 恩怨迷蒙 似曾相识 露青锋 云景深处 琴瑟伴笛声 世事无常 独醉梦一场 观正邪两道 探世间喧嚣 并肩战江湖 从未曾 将内心辜负 潇洒人间道 善恶都离空 却抹不掉心中伤痕 这一世 与人无争 纵然与世无争 道不同义在心中 怎奈侠肝义胆 却成一场空 善恶是非分明 爱恨界限不清 相知就像是一场梦 纵然与世无争 道不同义在心中 怎奈侠肝义胆 却成一场空 善恶是非分明 爱恨界限不清 相知就像是一场梦 照片]]></content>
      <tags>
        <tag>人文</tag>
      </tags>
  </entry>
</search>
