<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[魅族手机剩余30%电量自动关机]]></title>
    <url>%2F2019%2F03%2F06%2F%E9%AD%85%E6%97%8F%E6%89%8B%E6%9C%BA%E5%89%A9%E4%BD%9930-%E7%94%B5%E9%87%8F%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[您好，请您按照以下方法排除故障：1、电池的电量计是什么：用于监测手机电池的电压/电流，计算电量的芯片。2、电量计不准确可能导致的情况：充不满电、不掉电、快速掉电、电量跳变、高电量关机……3、电量计校准方法：方法一：满电后持续充电使用充电器给手机充电，充满至100%后继续保持充电状态1小时左右，即可完成电量计校准。注意过程中手机需保持休眠，不可**作或者APP后台唤醒。（建议睡觉时，将手机清理后台、关闭网络充电一晚上。）方法二：完整充放电并静置手机先充满电，然后正常使用至没电关机，关机后等待2小时再进行充电即可校准电量计。方法三：低电量关机静置当手机电量低于10%时，手动将手机关机，1小时后再开机即可校准电量计。]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[指令的动态调度]]></title>
    <url>%2F2019%2F03%2F06%2F%E6%8C%87%E4%BB%A4%E7%9A%84%E5%8A%A8%E6%80%81%E8%B0%83%E5%BA%A6%2F</url>
    <content type="text"></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[指令级并行的概念]]></title>
    <url>%2F2019%2F03%2F05%2F%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;自20世纪80年代中期以来，几乎所有的处理机都利用流水线来使指令重叠并行执行，以达到提高性能目的。这种指令之间存在的潜在并行性成为指令级并行（ILP）。通过利用各种技术，在流水线思想的基础上进一步扩展，开发出更多的指令级并行。&emsp;&emsp;开发ILP主要分为两类：主要基于硬件的动态开发以及基于软件的静态开发方法。在实际开发中，往往需要两者兼用。特别是，把硬件与软件技术以及动态的方法与静态方法结合起来，才能充分开发程序中潜在的指令级并行。&emsp;&emsp;流水线处理机的实际CPI等于理想流水线的CPI加上各类停顿的时钟周期： $$ CPI_{流水线}=CPI_{理想}+停顿_{结构冲突}+停顿_{数据冲突}+停顿_{控制冲突} $$ &emsp;&emsp;其中，￥CPI_{理想}是衡量流水线最高性能的一个指标。通过减少该式右边各项，就能减小总的CPI，从而提高IPC（Instructions Per Cycle，每个时钟周期完成的指令条数）。&emsp;&emsp;相关是程序固有的一种属性，它反映了程序中指令之间的相互依赖关系。而具体的一次相关是否会导致实际冲突的发生以及该冲突会带来多长的停顿，则是流水线的属性。&emsp;&emsp;主要从以下两个方面解决相关问题：&emsp;&emsp;（1）保持相关，但避免发生冲突。&emsp;&emsp;（2）通过代码变换，消除相关。&emsp;&emsp;指令调度是一种用以避免冲突的主要方法，但它不改变相关。通过动态调度代码的硬件方法，可以消除某些相关。&emsp;&emsp;由于相关的存在，必须保持程序顺序。程序书序是指，有源程序确定的在完全串行方式下指令的执行顺序。只有在可能影响程序正确性的情况下，才需要保持程序顺序。&emsp;&emsp;对于正确的执行程序来说，必须保持的最关键的两个属性是：数据流（data flow）和异常行为（exception behavior）。&emsp;&emsp;保持异常行为是指：无论怎么改变指令的执行顺序，都不能改变程序中异常的发生情况。&emsp;&emsp;如果能做到保持程序的数据相关和控制相关，就能保持程序的数据流和异常行为。]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法]]></title>
    <url>%2F2019%2F03%2F03%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"></content>
      <tags>
        <tag>知识</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[向量处理机]]></title>
    <url>%2F2019%2F03%2F02%2F%E5%90%91%E9%87%8F%E5%A4%84%E7%90%86%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;为了充分发挥流水线的效率，实现高性能计算，有的流水线处理设置了向量数据表示和相应的向量指令。这种向量处理机成为向量处理机。（此处的向量和数组类似）不具有向量表示和相应的向量指令的处理机，称为标量处理机。向量处理机有专用型，其高性能是局限于求解那些可以转化为向量运算的问题。 向量处理方式&emsp;&emsp;主要有三种方式：①横向处理方式；②纵向处理方式；③纵横处理方式。 向量处理机的结构&emsp;&emsp;以CRAY-1机为例，介绍寄存器-寄存器型向量处理机的结构和特点。 功能部件&emsp;&emsp;共有12条可并行工作的单功能流水线，可分别流水地进行地址、向量、标量的各种运算。它为向量运算提供了6个单功能流水部件：整数加（3拍）、逻辑运算（2拍）、移位（4拍）、浮点加（6拍）、浮点乘（7拍）和浮点迭代求倒数（14拍）。每拍为一个时钟周期，12.5ns。 向量寄存器组V&emsp;&emsp;每个向量寄存器可以每拍向功能部件提供一个数据元素，或者每拍接受一个从功能部件来的结果元素。 标量寄存器S和快速暂存器T向量屏蔽寄存器VM提高向量寄存器性能的方法&emsp;&emsp;一般有以下方法：①设置多个功能部件，使它们并行工作；②采用链接技术，加快一串向量指令的执行；③采取循环开采技术，加快循环的处理；④采用多处理器系统，进一步提高性能。 设置多个功能部件&emsp;&emsp;通过设置多个独立的功能部件，提高性能。这行部件能并行工作并各自按照流水方式工作，从而形成了多条并行工作的运算操作流水线。 链接技术&emsp;&emsp;链接技术是指，具有先写后读相关的两条指令，在不出现功能部件冲突和源向量冲突的情况下，可以把功能部件链接起来进行流水处理，以达到加快执行的目的。链接特性是CRAY-1向量处理的一个显著特点。&emsp;&emsp;链接技术实际上可以看成流水线的定向技术在向量处理机中的应用。当前一个向量功能部件产生第一个结果并送到结果向量寄存器的入口时，将该结果立即送往下一个功能部件的入口，开始后续的向量处理操作。此后依次得到的中间结果都按此处理。这样，前面功能部件的结果元素一产生，就可以立即被后面功能部件所使用，而不用等结果向量全部产生后再来使用。 分段开采技术&emsp;&emsp;当向量的长度大于向量寄存器的长度时，必须把长向量分成长度固定的段，然后循环分段处理，每次循环只处理一个向量段。这种技术成为分段开采技术。将长向量分段成循环处理是由系统硬件和软件控制完成的，对程序员是透明的。 采用多处理机系统]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机中的流水线及其性能指标]]></title>
    <url>%2F2019%2F02%2F28%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%8F%8A%E5%85%B6%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87%2F</url>
    <content type="text"><![CDATA[基本概念&emsp;&emsp;和工业生产中的流水线类似，在计算机系统中，把一个重复的过程，分解成若干个子过程，每个子过程由专门的功能部件来实现。将多个处理过程在时间上错开，依次通过各功能段，每个子过程都可以与其他子过程同时并行进行。这就是流水线技术。&emsp;&emsp;流水线中的每个字过程及其功能部件成为流水线的段或级，段与段之间互相连接形成流水线。流水线的段数成为流水线的深度。&emsp;&emsp;把流水线技术应用于运算的执行过程，形成运算操作流水线；吧流水线技术应用于指令的解释执行过程，形成指令流水线。流水线的工作过程常常采用时空图的方法描述。 流水线特点&emsp;&emsp;(1) 流水线把一个处理工程分解为若干子过程（段），每个子过程都由一个专门的功能部件实现。&emsp;&emsp;(2) 流水线中各段的时间应该尽可能相等。否则，将引起流水线阻塞、断流，因为时间长的段将成为流水线的瓶颈，此时流水线中的其他功能部件就不能充分发挥作用。&emsp;&emsp;(3) 流水线每个功能部件的后面都有一个缓冲寄存器（锁存器），称为流水寄存器。其作用是在相邻两段之间相互传送数据，保证提供后面要用到的数据，并把各段的处理工作互相隔离。&emsp;&emsp;(4) 流水线技术适合于大量重复的时序过程，只有在输入端不断地输入任务，才能充分发挥流水线的效率。&emsp;&emsp;(5) 流水线需要通过实践和排空时间。通过时间是第一个任务从进入到流出的时间段，排空时间是最后一个任务的时间段。在这两个时间段内，流水线都不是满载。效率未得到充分发挥。 流水线分类从完成功能角度&emsp;&emsp;(1)单功能流水线：只能完成一种固定功能的流水线。&emsp;&emsp;(2)多功能流水线：可以以各段进行不同的连接，而实现不同的功能的流水线。但要保证不能发成冲突。 按照同一时间段内各段之间的连接方式&emsp;&emsp;(1)静态流水线：在同一时间段内，多功能流水线的各段只能按照同一功能的连接工作。当按另一种连接实现其他功能时，必须等按照原来连接方式处理的所有任务都流出流水线之后，才能改变连接。&emsp;&emsp;(2)动态流水线：在同一时间段内，多功能流水线的各段可以按照不同连接，同时执行多种功能。 从流水点级别角度&emsp;&emsp;(1)部件级流水线（运算操作流水线）：它把处理机的算术处理运算部件分段，使得各种类型的运算操作能够按照流水方式进行。&emsp;&emsp;(2)处理机级流水线（指令流水线）：它是把指令的解释过程分成不同过程，按照流水方式处理。&emsp;&emsp;(3)处理机间流水线（宏流水线）：它是由两个或两个以上处理机串行连接起来，对同一数据流进行处理，每个处理机完成整个任务的一部分。前一个处理机的输出结果存入存储器中，作为后一个处理机的输入。这一般属于异构型多处理机系统，它对提高各处理机的效率有很大的作用。 从反馈角度&emsp;&emsp;(1)线性流水线：流水线的各段串行连接，没有反馈回路。&emsp;&emsp;(2)非线性流水线：流水线中除了有串行的连接外，还有反馈回路。常用于递归或组成多功能流水线。&emsp;&emsp;在非线性流水线中，一个重要的问题是确定什么时候向流水线引进新任务，才能使该任务不会与先前进入流水线的任务发生冲突——争用流水段。这就是非线性流水线的调度问题。 从任务流入流出角度&emsp;&emsp;(1)顺序流水线：流水线输出端任务流出的顺序与输入端任务流入的顺序完全相同。&emsp;&emsp;(2)乱序流水线，又称无序流水线、错序流水线、异步流水线。&emsp;&emsp;通常把指令执行部件中采用流水线的处理机成为流水线处理机。如果处理机不具有向量数据表示和向量指令，仅对标量数据进行流水处理，如IBM 360/91、Amdahl 470V/6，称为标量处理机。具有向量表示和向量指令的处理机，称为向量流水处理机。向量处理机是向量数据表示和流水技术的结合。 流水线性能指标&emsp;&emsp;主要有吞吐率、加速比和效率三个指标。 吞吐率&emsp;&emsp;吞吐率TP（ThroughPut）是指在单位时间内流水线所完成的任务数量或者输出结果的数量。 $ TP=\frac{n}{T_k} $ &emsp;&emsp;其中，n为任务数，$ {T_k} $ 是处理完成n个任务所用的时间。 &emsp;&emsp;由图知： $$ T_k=k \Delta t+ (n-1)\Delta t= (k+n-1) \Delta t $$ &emsp;&emsp;得出： $$ TP= \frac{n}{(k+n-1)\Delta t} $$ &emsp;&emsp;这种情况下最大吞吐率为： $$ TP_{max}= \lim {(n \rightarrow \infty)}\frac{n}{(k+n-1)\Delta t} = \frac{1}{\Delta t}$$ &emsp;&emsp;最大吞吐率与实际吞吐率的关系为： $$ TP= \frac{n}{k+n-1} TP_{max} $$ 解决流水线瓶颈问题常用方法&emsp;&emsp;1) 细分瓶颈段。&emsp;&emsp;2) 重复设置瓶颈段。 加速比&emsp;&emsp;完成同一批任务，不使用流水线所用的时间和使用流水线所用的时间之比称为流水线的加速比。&emsp;&emsp;设不使用流水线所用的时间$ T_s $, 使用流水线所用的时间为$ T_k $,则流水线的加速比为： $$ S= \frac {T_s}{T_k} $$ &emsp;&emsp;理想情况下，一条k段流水线完成n个连续任务所需要的时间为 $ T_k=(k+n-1) \Delta t $，不使用流水线技术，而采用顺序执行方式，完成n个任务所需要的时间为：$ T_s=nk \Delta t $。带入上述公式得到加速比： $$ S=\frac{nk }{(n+k-1) } $$ &emsp;&emsp;这种情况下流水线的最大技术比为： $$ S_{max}=\lim {(n \rightarrow \infty)} \frac{nk}{n+k-1}=k $$ 效率&emsp;&emsp;流水线的效率是指流水线中的设备实际使用时间和整个运行时间的比值，即流水线设备的利用率。&emsp;&emsp;理想状态下，如上面时空图所示，各段的效率是相同的。 $$ e_1=e_2=····=\frac{n \Delta t}{T_k}=\frac{n}{n+k-1} $$ &emsp;&emsp;整条流水线的效率为： $$ E=\frac{e_1+e_2+···+e_k}{k}=\frac{ke_1}{k}=\frac{kn \Delta t}{kT_k} $$ &emsp;&emsp;或： $$ E=\frac{n}{k+n-1} $$ &emsp;&emsp;最高效率为： $$ E_{max}=\lim{(n \rightarrow \infty)} \frac{n}{k+n-1}=1 $$ &emsp;&emsp;显然当$ n\rightarrow \infty $时，流水线的效率接近于1。这时流水线各段都趋于忙碌状态。上述公式也可写成： $$ E=TP \Delta t $$ $$ E=\frac{S}{k} $$ &emsp;&emsp;即流水线的效率是流水线实际加速比S与其段数k的比值。只有当$ E=1 , S=k $,实际极速比达到最大。&emsp;&emsp;引入时空图中，流水线的效率即为任务占用的时空面积和k个段总的时空面积之比。可以表示为： $$ E=\frac{n个任务实际占用的时空区}{k个段总的时空区} $$ &emsp;&emsp;画出时空图，根据上述公式计算效率，对于线性流水线、非线性流水线、多功能流水线、任务不连续等情况均使用。&emsp;&emsp;当各段时间不相等时，连续执行n个任务时，效率为： $$ E=\frac{n \sum\limits_{i=1}^k \Delta t_i}{k[\sum\limits_{i=1}^k \Delta t_i+ (n-1)max(\Delta t_1,\Delta t_2,···,\Delta t_k)]} $$ 流水线设计的若干问题瓶颈问题流水线的额外开销&emsp;&emsp;流水线的额外开销是指流水寄存器延迟和时钟偏移开销。流水寄存器需要建立时间和传输延迟。时钟偏移开销是指流水线中时钟到达各流水寄存器的最大差值时间。 冲突问题]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[流水线的相关与冲突]]></title>
    <url>%2F2019%2F02%2F28%2F%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E7%9B%B8%E5%85%B3%E4%B8%8E%E5%86%B2%E7%AA%81%2F</url>
    <content type="text"><![CDATA[一段经典的5段流水线&emsp;&emsp;以一个经典的5段RISC（Reduced Instruction Set Computer，精简指令集计算机）流水线为例。&emsp;&emsp;一条指令的执行过程分为以下5个周期：&emsp;&emsp;1. 取指令周期（IF）&emsp;&emsp;根据PC指示的地址从存储器中取出指令并放入指令寄存器IR；同时PC值加4（假设每条指令占4个字节），指向顺序的下一条指令。&emsp;&emsp;2. 指令译码/读寄存器周期（ID）&emsp;&emsp;对指令进行译码，并用IR中的寄存器编号去访问通用寄存器组，读出所需的操作数。&emsp;&emsp;3. 执行/有效地址计算周期（EX）&emsp;&emsp;在这个周期，ALU对在上一个周期准备好的操作数进行运算或处理。不同指令所进行的操作不同：&emsp;&emsp;（1）存储器访问指令：ALU把所指定的寄存器的内容与偏移量相加，形成用于访存的有效地址。&emsp;&emsp;（2）寄存器-寄存器ALU指令：ALU按照操作码指定的操作对从通用寄存器组中读取的数据进行运算。&emsp;&emsp;（3）寄存器-立即数ALU指令：ALU按照操作码指定的操作对从通用寄存器组中读取的第一操作数和立即数进行运算。&emsp;&emsp;（4）分支指令：ALU把偏移量与PC值相加，形成转移目标地址。同时，对在前一个周期读出的操作数进行判断，确定分支是否成功。&emsp;&emsp;4. 存储器访问/分支完成周期（MEM）&emsp;&emsp;1）load和store指令&emsp;&emsp;如果是load指令，就用上一个周期计算出的有效地址从存储器中读取相应的数据；如果是store指令，就把指定的数据写入这个有效地址所指出的存储器单元。&emsp;&emsp;2）分支指令&emsp;&emsp;如果在前一个周期判定该分支“成功”，就把转移目标地址送入PC。分支指令完成。&emsp;&emsp;5. 写回周期（WB）&emsp;&emsp;ALU运算指令和load指令在这个周期把结果数据写入通用寄存器组。对于ALU运算指令来说，这个结果数据来自ALU，对于load指令，结果数据来自存储器系统。 相关&emsp;&emsp;相关是指两条指令之间存在某种依赖关系。有三中类型：数据相关（真数据相关），名相关，控制相关。 数据相关（data dependence）&emsp;&emsp;对于两条指令i和j（有先后关系），如下条件之一成立，则称有数据相关：&emsp;&emsp;（1）指令j使用指令i产生的结果。&emsp;&emsp;（2）指令j与指令k数据相关，指令k又与指令i数据相关。&emsp;&emsp;其中，第二个条件表明，数据相关具有传递性。 名相关（name dependence）&emsp;&emsp;这里的名是指指令所访问的寄存器或存储器单元的名称。如果两条指令使用相同的名，但是他们之间没有数据流动，则称这两条指令之间存在名相关。名相关有一下两种：&emsp;&emsp;（1）反相关。如果指令j写的名和指令i读的名相同，则称为反相关。&emsp;&emsp;（2）输出相关。如果指令i和j写的名相同，称为输出相关。&emsp;&emsp;名相关可以通过换名技术消除，即把其中一条指令所使用的名换成别的，并不影响另一条指令的正常执行 控制相关（control dependence）&emsp;&emsp;（此消除不能消除）控制相关是指由分支指令引起的相关。他需要根据分支指令的执行结果来确定后续指令是否执行。一般来说，为了保证程序应有的执行顺序，必须严格按控制相关确定的顺序执行。控制相关的一个简单例子是if语句中的then部分。 流水线冲突&emsp;&emsp;流水线冲突是指对于具体的流水线来说，由于相关的存在，使得指令流中的下一条指令不能在指定的时钟周期执行。&emsp;&emsp;流水线冲突有以下3中类型：&emsp;&emsp;（1）结构冲突：因硬件资源满足不了指令重叠执行的要求而发生的冲突。&emsp;&emsp;（2）数据冲突：当指令在流水线中重叠执行时，因需求用到指令的执行结果而发生的冲突。&emsp;&emsp;（3）控制冲突：流水线遇到分支指令和其他会改变PC值的指令所引起的冲突。 结构冲突&emsp;&emsp;当功能部件不是完全流水或资源不够时，往往发生冲突。&emsp;&emsp;解决方法是对功能部件进行流水或重复设置资源。 数据冲突&emsp;&emsp;数据冲突有三种：&emsp;&emsp;（1）写后读冲突：指令j用到指令i的计算结果，而且在i将结果写入寄存器之前就去读该寄存器，因而得到的是旧值。对应真数据相关。&emsp;&emsp;（2）写后写冲突：指令j和指令i的结果单元（寄存器或存储器单元）相同，而且j在i写入之前就先该单元进行了写入操作，从而导致了写入顺序错误。对应输出相关。&emsp;&emsp;前面介绍的5段流水线由于只发生在WB段写寄存器，不会发生写后写冲突。写后写冲突仅发生在这样的流水线中：①流水线中不止一个段可以进行写操作；②当先前某条指令停顿时，允许其后续指令继续前进。&emsp;&emsp;（3）读后写冲突：指令j的结果单元和指令i的源操作上述单元相同，而且j在i读取该单元之前就先对之进行了写入操作，导致i读取到的值是错误的。对应反相关。&emsp;&emsp;读后写冲突不会发生在前述5段流水线中，因为这种流水线中的所有读操作（在ID段）都在写结果前发生。此冲突发生在：①有些指令的写结果操作提前了，而且有些指令的读操作滞后了；或②指令被重写排序了。 通过定向技术减少数据冲突引起的冲突&emsp;&emsp;通过定向技术（旁路或短路技术）解决写后读冲突。&emsp;&emsp;关键思路是：在某条指令在产生计算结果前，其他指令并不真正立即需要该计算结果，如果能够将该计算结果从其产生的地方直接送到其他指令需要的地方，那么就可以避免停顿。实现方法：&emsp;&emsp;（1）EX段和MEM段之间的流水寄存器中保存的ALU运算结果总是送到ALU的入口。&emsp;&emsp;（2）当定向硬件检测到前一个ALU运算结果写入的寄存器就是当前ALU操作的源寄存器时，那么控制逻辑就选择定向的数据作为ALU的输入结果，而不采用从通用寄存器组读出的值。 需要停顿的数据冲突&emsp;&emsp;在某些不能通过定向技术等方法解决冲突时，需要设置一个“流水线互锁机制”的功能部件。来检测、发现数据冲突，并使得流水线停顿，直至冲突消失。在停顿处加入“气泡”。 依靠编译器解决数据冲突&emsp;&emsp;为减少冲突，对于无法用定向技术解决的数据冲突，可以通过在编译时让编译器重新组织指令顺序来消除冲突，称为“指令调度”或“流水线调度”。对于各种冲突，都有可能用指令调度来解决。 控制冲突&emsp;&emsp;控制冲突可能产生比数据冲突更多的性能损失。对于分支指令，有两种结果，一种是分支“成功”，PC改变为分支转移的目标地址。另一种是“不成功”或者“失败”，这是PC值保持正常递增，按原来顺序执行下一条指令。如果分支成功，在条件判定和转移地址计算都完成后，才改变PC值。对于前述5段流水线来说，改变PC值是在MEM段进行的。&emsp;&emsp;处理分支指令最简单的方法是“冻结”或“排空”流水线。即当出现分支指令时，立即停止以后的指令执行，知道分支指令结果确定。&emsp;&emsp;由分支指令引起的延迟称为分支延迟。&emsp;&emsp;为减少分支延迟，可采取以下措施：&emsp;&emsp;（1）在流水线中尽早判断出分支转移是否成功。&emsp;&emsp;（2）今草计算出分支目标地址。&emsp;&emsp;这两种措施缺一不可。只有两者都有时，才能进行转移。&emsp;&emsp;通过软件（编译器）减少分支延迟的方法主要有三种：预测分支成功，预测分支失败，延迟分支。 预测分支失败&emsp;&emsp;当分支指令出现时，沿失败的分支继续处理指令，当分支指令结果确定后，在按照结果，如果是分支失败，则辨明预测成功，继续执行；如果是分支成功，流水线就把分支指令之后取出的指令转化为空操作，并按照分支目标地址重新取指令执行。 预测分支成功&emsp;&emsp;与预测分支失败同理。 延迟分支&emsp;&emsp;这种方法主要是从逻辑上“延迟”分支指令的执行时间。把延迟分支看成是由原来的分支指令和若干延迟槽构成。在实际机器中，绝大多数情况下只有一个延迟槽。&emsp;&emsp;延迟分支的效率完全取决于编译器能否把有用的指令调度到延迟槽中。这也是一种指令调度技术。常用的调度方法有3种：从前调度，从目标出调度，从失败处调度。]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机系统设计的定量原理]]></title>
    <url>%2F2019%2F02%2F26%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%9A%E9%87%8F%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[以经常性事件为重点Amdahl定律&emsp;&emsp;此定律指出：加快某个部件执行速度所能获得的系统性能提升，受限于此部件的执行时间占系统中总执行时间的占比。&emsp;&emsp;系统加速比公式：&emsp;&emsp;&emsp;&emsp; 系统加速比=\frac {系统性能_{改进后}} {系统性能_{改进前}}=\frac {总执行时间_{改进前}} {总执行时间_{改进后}}&emsp;&emsp;设出定义：(1)可改进比例：在改进前的系统中，可改进部分的执行时间在总的执行时间中所占的比例。(2)部件加速比：可改进部分在改进后性能提高的倍数。它是改进前所需执行时间和改进后所需执行时间的比。&emsp;&emsp;由(1)(2)得出：&emsp;&emsp;&emsp;&emsp; 总执行时间_{改进后}=\frac{可改进比例* 总执行时间_{改进前}}{部件极速比}+不可改进比例*总执行时间_{改进前}&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; =总执行时间_{改进前}* [(1-可改进比例)+ \frac{可改进比例}{部件加速比}]&emsp;&emsp;&emsp;&emsp; 系统加速比=\frac {总执行时间_{改进前}} {总执行时间_{改进后}}=\frac {1}{(1-可改进比例)+\frac{可改进比例}{部件加速比}} CPU性能公式&emsp;&emsp;&emsp;&emsp; CPU时间=执行程序所需的时钟周期数* 时钟周期时间&emsp;&emsp;其中，时钟周期时间是系统时钟频率的倒数，即 时钟周期时间=\frac{1}{f}。&emsp;&emsp;引入新参数CPI（Cycles Per Instruction，每条指令的平均时钟周期数），有：&emsp;&emsp;&emsp;&emsp; CPI=\frac{执行程序所需的时钟周期数}{所执行的指令条数}&emsp;&emsp;则推出CPU性能公式：&emsp;&emsp;&emsp;&emsp; CPU时间=IC* CPI* 时钟周期时间&emsp;&emsp;其中，IC为所执行的指令条数。&emsp;&emsp; 根据上述公式，得知CPU的性能取决于以下三个参数：&emsp;&emsp;&emsp;(1) 时钟周期时间：取决于硬件实现技术和计算机组成。&emsp;&emsp;&emsp;(2) CPI：取决于计算机组成和指令集结构。&emsp;&emsp;&emsp;(3) IC：取决于指令集结构和编译技术。&emsp;&emsp;其他公式：&emsp;&emsp;&emsp;&emsp; CPU时钟周期数=\sum\limits_{i=1}^n{(CPI_i*IC_i)}&emsp;&emsp;其中，{IC_i}为程序执行的过程中第i种指令出现的次数，{CPI_i}为执行第i种指令所需的平均时钟周期，n为指令的种数。&emsp;&emsp;&emsp;&emsp; CPU时间=CPU时钟周期数*时钟周期时间=\sum\limits_{i=1}^n{(CPU_i*IC_i)* 时钟周期时间}&emsp;&emsp;&emsp;&emsp; CPI=\frac{时钟周期数}{IC}= \frac{\sum\limits_{i=1}^n{(CPI_i*IC_i)}}{IC}= \sum\limits_{i=1}^n{(CPI_i* \frac{IC_i}{IC})}&emsp;&emsp;其中，(\frac{IC_i}{IC})反映了第i种指令在程序执行过程中所占的比例。 程序的局部性原理]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并行概念]]></title>
    <url>%2F2019%2F02%2F26%2F%E5%B9%B6%E8%A1%8C%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[基本概念指计算机系统在同一时刻或者同一时间间隔内进行多种运算或者操作。在时间上相互重叠。包括同时性与并发性两种含义。 同时性———两个或者两个以上事件在同一时刻发生。 并发性———两个或者两个事件在同一时间间隔内发生。 分类从处理数据角度：字串韦串，字串位并，字并位串，字并位并。从执行程序角度：指令内部并行，指令级并行，线程级并行，任务级或过程级并行，作业或程序级并行。 发展单机系统中的发展通过“部件功能专用化”实现时间重叠；多体存储器和多操作部件都是通过资源重复形式发展，如将通用部件（如加法部件，减法部件等）重复设置多个，进一步发展成为并行处理机（阵列处理机）；通过模拟多处理机的功能，形成虚拟机，实现资源共享。 多级系统中的发展多机系统分为：同构型多处理机，异构型多处理机，分布式系统。反应在耦合度上，分为紧密耦合和松散耦合。成为紧密耦合系统（直接耦合系统）和松散耦合系统（间接耦合系统）。松散耦合系统又分为两种形式，一种是多台计算机和桐乡的外存储连接，通过功能专用化，把不同功能计算机处理的结果以文件或者数据集的形式送到共享外存储器，以供其他计算机继续处理。另一种是计算机网络，通过通信线路连接，实现了更大范围的资源共享。 提高并行性途径时间重叠，资源重复，资源共享。现行计算机系统中，经常是同时运用时间重叠和资源重复两种措施。 时间重叠在并行性概念中，引入时间概念，让多个处理过程在时间上相互错开，轮流重叠的使用同一套硬件设备的各个部分，以加快硬件周转而赢得速度。典型实例是流水线技术。 资源重复引入空间因素，通过重复设置硬件资源，大幅提高系统性能。 资源共享是一种软件方法，它使多个任务按一定时间顺序轮流使用一套硬件设备。多道程序、分时系统就是遵循这一途径产生。资源共享既降低了成本，又提高了计算机设备的利用率。]]></content>
      <tags>
        <tag>知识</tag>
        <tag>计算机系统结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纪录片《大明宫》]]></title>
    <url>%2F2019%2F02%2F24%2F%E7%BA%AA%E5%BD%95%E7%89%87%E3%80%8A%E5%A4%A7%E6%98%8E%E5%AE%AB%E3%80%8B%2F</url>
    <content type="text"><![CDATA[片尾曲《大明宫》(网易云)前世风雨后世尘烟亭台宫阙都成残垣繁华落尽王侯长眠谁的功过万世流传时间蔓延万代千年人生太短暂怎守江山我站在人间看风云变幻任由残砖碎瓦铭刻变迁岁月流淌历尽沧桑昨日辉煌今在何方我思我想亦歌亦狂才闻欢笑又见泪光时间蔓延万代千年岁月走不完朝代轮转我站在人世间数兴衰的循环多想长生不老再看江山金碧辉煌羽衣霓裳人间天上唯你无双耀眼光芒无尽惆怅萦绕着每颗心梦回大唐]]></content>
      <tags>
        <tag>人文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown常用数学公式及符号]]></title>
    <url>%2F2019%2F02%2F23%2FMarkdown%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%8F%8A%E7%AC%A6%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[括号() [] 直接写就行，而 {} 则需要转义“{ ” “}” 上下标a_下标，b^上标：a_b， a^c 分数 \frac {分子} {分母} ：\frac {分子} {分母} 求和符号及其上下限位置默认情况下：默认行间公式\sum_{k=1}^n{x_k}上下限标注在上下： \sum_{k=1}^n{x_k}可强制修改：强制行间公式\sum\nolimits_{k=1}^n{x_k}上下限标注在右侧： \sum\nolimits_{k=1}^n{x_k}数学符号± ：\pm× ：\times÷：\div∣：\mid ⋅：\cdot∘：\circ∗: \ast⨀：\bigodot⨂：\bigotimes⨁：\bigoplus≤：\leq≥：\geq≠：\neq≈：\approx≡：\equiv∑：\sum∏：\prod∐：\coprod 集合运算符：∅：\emptyset∈：\in∉：\notin⊂：\subset⊃ ：\supset⊆ ：\subseteq⊇ ：\supseteq⋂ ：\bigcap⋃ ：\bigcup⋁ ：\bigvee⋀ ：\bigwedge⨄ ：\biguplus⨆：\bigsqcup 对数运算符：log ：\loglg ：\lgln ：\ln 三角运算符：⊥：\bot∠：\angle30∘：30^\circsin ：\sincos ：\costan ：\tancot ：\cotsec ：\seccsc ：\csc 微积分运算符：y′x：\prime∫：\int∬ ：\iint∭ ：\iiint∬∬：\iiiint∮ ：\ointlim ：\lim∞ ：\infty∇：\nabla 逻辑运算符：∵：\because∴ ：\therefore∀ ：\forall∃ ：\exists≠ ：\not=≯：\not&gt;⊄：\not\subset 戴帽符号：y^ ：\hat{y}\check{y} ：\check{y}y˘ ：\breve{y} 连线符号：a+b+c+d¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯：\overline{a+b+c+d}a+b+c+d−−−−−−−−−− ：\underline{a+b+c+d}a+b+c1.0+d2.0：\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0} 箭头符号：↑：\uparrow↓：\downarrow⇑ ：\Uparrow⇓：\Downarrow→：\rightarrow← ：\leftarrow⇒ ：\Rightarrow⇐ ：\Leftarrow⟶ ：\longrightarrow⟵ ：\longleftarrow⟹：\Longrightarrow⟸ ：\Longleftarrow 参考链接：https://blog.csdn.net/xingxinmanong/article/details/78528791https://www.cnblogs.com/q735613050/p/7253073.htmlhttps://blog.csdn.net/thither_shore/article/details/52260742https://blog.csdn.net/qq_38228254/article/details/78515800]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse Java开发采坑]]></title>
    <url>%2F2019%2F02%2F02%2FEclipse-Java%E5%BC%80%E5%8F%91%E9%87%87%E5%9D%91%2F</url>
    <content type="text"><![CDATA[eclipse无法解析导入 javax.servlet 的解决方法出现上述问题的原因是你的Eclipse项目没有导入JSP运行所需要的Tomcat类库，主要是servlet-api.jar文件(或者servlet.jar），tomcat容器里面有这文件，在以下位置：%Tomcat_Home%/common/lib/servlet-aip.jar,要将其导入到项目的构建路径中(如果你用的是Eclipse). 导入方法：右击你的Eclipse项目，选择 “构建路径”—“配置构建路径”。点击“库”选项卡，单击右边的“添加库”按钮，在出现的“添加库”对话框中选中“服务器运行时”，单击“下一步”，在出现的对话框中选中你使用的Tomcat服务器,例如，我的是：Apache Tomcat v5.5,单击“完成”既可。这时你的Tomcat类库就添加到当前项目中了。依次展开Java Resources: src-&gt;Libraries，就能看到Apache Tomcat v5.5[Apache Tomcat v5.5]类库已经添加到当前项目中了。 request中的setCharacterEncoding方法不识别request中的setCharacterEncoding方法作用是用指定的编码集去覆盖request对象中的默认的”ISO-8859-1”编码集，这样request.getParameter(“”)方法就会用新的编码集去解码，必须在第一次使用request时就要调用这个方法来设置编码集，否则该方法就会无效。单独加载weblogic.jar，应为它会用到request网上说servlet-api.jar版本必须在2.4之后上面的方法都试过后，我的setCharacterEncoding（“utf-8”）方法依然不识别；简直气人啊；最后用 where java 命令查看安装的jdk发现jdk地址显示“c:\programData\Oracle\java\javapath……java.exe”和环境变量配置的地址不一样，果断删除，并将path环境变量里的jdk相关配置放到最前面]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[魅族魅蓝S6获取完整ROOT]]></title>
    <url>%2F2019%2F02%2F01%2F%E9%AD%85%E6%97%8F%E9%AD%85%E8%93%9DS6%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4ROOT%2F</url>
    <content type="text"><![CDATA[参考链接https://romprovider.com/2018/07/meizu-s6-root-twrp/amp/https://tieba.baidu.com/p/6023374283]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《自题金山画像》小记]]></title>
    <url>%2F2018%2F11%2F08%2F%E3%80%8A%E8%87%AA%E9%A2%98%E9%87%91%E5%B1%B1%E7%94%BB%E5%83%8F%E3%80%8B%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[自题金山画像 苏轼 心似已灰之木，身如不系之舟。 问汝平生功业，黄州惠州儋州。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;他题这首诗的时候，不知道会是悲戚的，还是无奈的。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从眉山和父亲、弟弟出发时对未来的无限憧憬，在汴梁考场金榜题名时的意气风发，到文坛领袖的赏识，再到仕途前辈的提携，自己也奋力的展现自己的抱负理想，没想到随转直下的，是官场政敌的恶意诋毁，随之而来的是贬嘀出京，新党政敌倒台被召还朝，引不满旧党的腐败现象，进行抨击，至此苏轼是既不能容于新党，又不能见谅于旧党，再贬岭南，而后一贬再贬，颠沛流离在外大半生。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直到又看到这幅画，题了这首诗，回顾了自己的前半生。虽然诗文名遍天下，却始终没能实现自己的政治抱负，但他应该还是乐观的，只因他是苏东坡，独一无二的苏东坡。]]></content>
      <tags>
        <tag>人文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用hexo框架和GitHub搭建个人博客的简易教程]]></title>
    <url>%2F2018%2F10%2F31%2F%E5%88%A9%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上。基本原理是用Git将hexo博客在本地编译后的文件，上传到GitHub，通过地址访问。通过此种方法看到的，严格上并不是一个网站系统，而只是托管在GitHub上的一堆静态网页。但我们可以在本地更新后，同步到GitHub来实现和网站系统一样的功能。 环境准备本地环境准备&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载并安装Git&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载并安装Node.js 账号注册&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注册GitHub账号 建站过程&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下过程在Git中进行。 安装hexo1$ install hexo 本地调试123$ hexo clean;//清理$ hexo generate;//编译$ hexo sever;//开启本地服务 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开浏览器，通过http://localhost:4000访问。 在GitHub上创建存储库&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命名方式为：用户名.github.io。 修改 站点配置 文件_config.yml1234deploy: type: git repo: https://github.com/用户名/用户名.github.io branch: master 部署到GitHub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一次可能需要登录GitHub账户。1$ hexo deploy;//部署 访问&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过 https://用户名.github.io 访问。 功能拓展更改主题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以再hexo官网查找主题，本站使用了next 主题。 启用本地搜索&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装1$ npm install hexo-generator-searchdb --save &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改 站点配置 文件_config.yml12345search: path: search.xml field: post format: html limit: 10000 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改 主题配置文件12local_search: enable: true 第三方评论&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用LiveRe(来必力)等。 网站统计&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用百度统计等。 更改访问域名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以在github项目库setting中设置自己的域名。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在freenom.com 可以注册.ml, .tk等结尾的免费顶级域名。 博文撰写 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以用符合Markdown语法的软件写自己的博客。]]></content>
      <tags>
        <tag>教程</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《魔道祖师》——每个人都是一个江湖]]></title>
    <url>%2F2018%2F10%2F28%2F%E9%AD%94%E9%81%93%E7%A5%96%E5%B8%88%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B1%9F%E6%B9%96%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前段时间，不经意间看到了《魔道祖师》的动画，感觉很棒。无论是动画形象，题材。比那些大IP好很多，为了补贴经费啥都干，吃相太难看。苍山乱烟外，玉树微雨里。举目人不见，凄凄风又起。（来源网络） 引 前世的魏无羡万人唾骂，声名狼藉。 被情同手足的师弟带人端了老巢， 纵横一世，死无全尸。 曾掀起腥风血雨的一代魔道祖师，重生成了一个…… 脑残。 还特么是个人人喊打的断袖脑残！！ 我见诸君多有病，料诸君见我应如是。 但修鬼道不修仙，任你千军万马，十方恶霸，九州奇侠，高岭之花， 但凡化为一抔黄土，统统收归旗下，为我所用，供我驱策！ 主题曲歌词 风雨前尘 傲视苍穹 轻抚陈情亦从容 云深不知处 天子笑坛中 世事无常 独醉梦一场 探正邪两道 观世间喧嚣 孤一身战江湖 亦不曾 将内心辜负 潇洒人间道 善恶都离空 却抹不掉心中伤痕 这一世 浮生若梦 纵然与世无争 道不同义在心中 怎奈侠肝义胆 却成一场空 善恶是非分明 爱恨界限不清 相识就像是一场梦 轮回重生 恩怨迷蒙 似曾相识 露青锋 云景深处 琴瑟伴笛声 世事无常 独醉梦一场 观正邪两道 探世间喧嚣 并肩战江湖 从未曾 将内心辜负 潇洒人间道 善恶都离空 却抹不掉心中伤痕 这一世 与人无争 纵然与世无争 道不同义在心中 怎奈侠肝义胆 却成一场空 善恶是非分明 爱恨界限不清 相知就像是一场梦 纵然与世无争 道不同义在心中 怎奈侠肝义胆 却成一场空 善恶是非分明 爱恨界限不清 相知就像是一场梦 照片]]></content>
      <tags>
        <tag>人文</tag>
      </tags>
  </entry>
</search>
